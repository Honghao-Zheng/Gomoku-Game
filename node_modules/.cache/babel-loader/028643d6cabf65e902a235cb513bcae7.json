{"ast":null,"code":"import { swapColor } from \"../../GameLogic.jsx\";\nimport { copyTwoDimArray } from \"../../GeneralAlgorithms.jsx\";\n\nfunction atkMoveEvaluation(move, pieceColor, board) {\n  let rowCoord = move[0];\n  let colCoord = move[1];\n  let score = 0;\n  let threeCount = 0;\n  let fourCount = 0;\n  let fourOneCount = 0;\n  let fiveCount = 0;\n  let vThreat = threatRecognise(verticalCheck(rowCoord, colCoord, pieceColor, board)); // console.log(\"vThreat: \"+vThreat)\n\n  let hThreat = threatRecognise(horizontalCheck(rowCoord, colCoord, pieceColor, board)); // console.log(\"hThreat: \"+hThreat)\n\n  let d1Threat = threatRecognise(leftBotToRightTopCheck(rowCoord, colCoord, pieceColor, board)); // console.log(\"d1Threat: \"+d1Threat)\n\n  let d2Threat = threatRecognise(leftTopToRightBotCheck(rowCoord, colCoord, pieceColor, board)); // console.log(\"d2Threat: \"+d2Threat)\n\n  let threats = [vThreat, hThreat, d1Threat, d2Threat]; // let threats=[hThreat];\n\n  let threatIndex;\n  let threat;\n\n  for (threatIndex = 0; threatIndex < threats.length; threatIndex++) {\n    threat = threats[threatIndex];\n\n    if (threat === 2) {\n      score += 2;\n    } else if (threat === 21) {\n      score += 1;\n    } else if (threat === 31) {\n      score += 4;\n    } else if (threat === 3) {\n      threeCount++;\n\n      if (threeCount === 2) {\n        score += 22;\n      } else if (threeCount >= 3) {\n        score += 1;\n      } else {\n        if (fourOneCount === 1) {\n          score += 14;\n        } else {\n          score += 8;\n        }\n      }\n    } else if (threat === 4) {\n      fourCount++;\n\n      if (fourCount >= 2) {\n        score += 1;\n      } else {\n        score += 32;\n      }\n    } else if (threat === 41) {\n      fourOneCount++;\n\n      if (fourOneCount === 1) {\n        if (threeCount === 1) {\n          score += 22;\n        } else {\n          score += 16;\n        }\n      } else {\n        score += 1;\n      }\n    } else if (threat === 5) {\n      fiveCount++;\n\n      if (fiveCount === 1) {\n        score += 128;\n      } else {\n        score += 1;\n      }\n    }\n  } // console.log(\"attack move evaluation:\"+score)\n\n\n  return score;\n}\n\nfunction verticalCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts; // console.log(\"rowIndex: \"+rowIndex)\n  // console.log(\"colIndex: \"+colIndex)\n  // console.log(\"board[rowIndex][colIndex]: \"+board[rowIndex][colIndex])\n\n  while (rowIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      // console.log(\"check top rowIndex: \"+rowIndex)\n      // console.log(\"check top colIndex: \"+colIndex)\n      if (occupant === pieceColor) {\n        sameColorCount++;\n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      rowIndex--;\n    } else {\n      break;\n    }\n\n    ;\n  }\n\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      // console.log(\"check bot rowIndex: \"+rowIndex)\n      // console.log(\"check bot colIndex: \"+colIndex)\n      if (occupant === pieceColor) {\n        sameColorCount++;\n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      rowIndex++;\n    } else {\n      break;\n    }\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  }; // console.log(\"vertical same counts: \"+counts.sameColor)\n  // console.log(\"vertical opposite counts: \"+counts.oppositeColor)\n\n  return counts;\n}\n\nfunction horizontalCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord; // console.log(\"rowCoord: \"+rowCoord)\n  // console.log(\"colCoord: \"+colCoord)\n  // console.log(\"pieceColor: \"+pieceColor)\n\n  let occupant;\n  let counts;\n\n  while (colIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      if (occupant === pieceColor) {\n        sameColorCount++;\n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      colIndex--;\n    } else {\n      break;\n    }\n  }\n\n  ;\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (colIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      if (occupant === pieceColor) {\n        sameColorCount++;\n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      colIndex++;\n    } else {\n      break;\n    }\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  }; // console.log(\"horizontal same counts: \"+counts.sameColor)\n  // console.log(\"horizontal opposite counts: \"+counts.oppositeColor)\n\n  return counts;\n}\n\nfunction leftBotToRightTopCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts; //to right top\n\n  while (rowIndex >= 0 && colIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      // console.log(\"rowIndex: \"+rowIndex) \n      // console.log(\"colIndex: \"+colIndex) \n      // console.log(\"occupant: \"+occupant) \n      if (occupant === pieceColor) {\n        sameColorCount++; // console.log(\"sameColorCount: \"+sameColorCount)        \n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      rowIndex--;\n      colIndex++;\n    } else {\n      break;\n    }\n  } //to left bot\n\n\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (colIndex >= 0 && rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      if (occupant === pieceColor) {\n        sameColorCount++; // console.log(count)        \n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      colIndex--;\n      rowIndex++;\n    } else {\n      break;\n    }\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction leftTopToRightBotCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts; //to leftTop\n\n  while (rowIndex >= 0 && colIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      if (occupant === pieceColor) {\n        sameColorCount++; // console.log(count)        \n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      rowIndex--;\n      colIndex--;\n    } else {\n      break;\n    }\n  }\n\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (colIndex < 15 && rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant !== \" \") {\n      if (occupant === pieceColor) {\n        sameColorCount++; // console.log(count)        \n      } else {\n        oppositeColorCount++;\n        break;\n      }\n\n      colIndex++;\n      rowIndex++;\n    } else {\n      break;\n    }\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction threatRecognise(counts) {\n  let sameColorCount = counts.sameColor;\n  let oppositeColorCount = counts.oppositeColor; // console.log(\"threatRecognise sameColorCount: \"+sameColorCount)\n  // console.log(\"threatRecognise oppositeColorCount: \"+oppositeColorCount)\n\n  let threat = null;\n\n  if (sameColorCount === 2 && oppositeColorCount === 0) {\n    threat = 2;\n  } else if (sameColorCount === 2 && oppositeColorCount === 1) {\n    threat = 21;\n  } else if (sameColorCount === 2 && oppositeColorCount === 1) {\n    threat = 21;\n  } else if (sameColorCount === 3 && oppositeColorCount === 0) {\n    threat = 3;\n  } else if (sameColorCount === 3 && oppositeColorCount === 1) {\n    threat = 31;\n  } else if (sameColorCount === 4 && oppositeColorCount === 0) {\n    threat = 4;\n  } else if (sameColorCount === 4 && oppositeColorCount === 1) {\n    threat = 41;\n  } else if (sameColorCount >= 5) {\n    threat = 5;\n  }\n\n  return threat;\n}\n\nfunction moveEvaluation(move, pieceColor, defFactor, board) {\n  let offenceScore = atkMoveEvaluation(move, pieceColor, board);\n  let oppositeColor = swapColor(pieceColor);\n  let boardCopy = copyTwoDimArray(board);\n  boardCopy[move[0]][move[1]] = oppositeColor;\n  let defenceScore = atkMoveEvaluation(move, oppositeColor, boardCopy) * defFactor;\n  let totalScore = offenceScore + defenceScore; // let totalScore=offenceScore;\n  // console.log(\"moveEvaluation function score:\"+totalScore)\n\n  return totalScore;\n}\n\nexport default moveEvaluation;","map":{"version":3,"names":["swapColor","copyTwoDimArray","atkMoveEvaluation","move","pieceColor","board","rowCoord","colCoord","score","threeCount","fourCount","fourOneCount","fiveCount","vThreat","threatRecognise","verticalCheck","hThreat","horizontalCheck","d1Threat","leftBotToRightTopCheck","d2Threat","leftTopToRightBotCheck","threats","threatIndex","threat","length","sameColorCount","oppositeColorCount","rowIndex","colIndex","occupant","counts","sameColor","oppositeColor","moveEvaluation","defFactor","offenceScore","boardCopy","defenceScore","totalScore"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/AIplayers/GA/MoveEvaluation.jsx"],"sourcesContent":["import {swapColor} from \"../../GameLogic.jsx\";\r\nimport {copyTwoDimArray} from \"../../GeneralAlgorithms.jsx\"\r\nfunction atkMoveEvaluation(move,pieceColor,board){\r\n    let rowCoord=move[0];\r\n    let colCoord=move[1];\r\n    let score=0;\r\n\r\n    let threeCount=0;\r\n    let fourCount=0;\r\n    let fourOneCount=0;\r\n    let fiveCount=0;\r\n    let vThreat=threatRecognise(verticalCheck(rowCoord,colCoord,pieceColor,board));\r\n    // console.log(\"vThreat: \"+vThreat)\r\n    let hThreat=threatRecognise(horizontalCheck(rowCoord,colCoord,pieceColor,board));\r\n    // console.log(\"hThreat: \"+hThreat)\r\n    let d1Threat=threatRecognise(leftBotToRightTopCheck(rowCoord,colCoord,pieceColor,board));\r\n    // console.log(\"d1Threat: \"+d1Threat)\r\n    let d2Threat=threatRecognise(leftTopToRightBotCheck(rowCoord,colCoord,pieceColor,board));\r\n    // console.log(\"d2Threat: \"+d2Threat)\r\n\r\n    let threats=[vThreat,hThreat,d1Threat,d2Threat];\r\n    // let threats=[hThreat];\r\n    let threatIndex;\r\n    let threat;\r\n    for (threatIndex=0;threatIndex<threats.length;threatIndex++){\r\n        threat=threats[threatIndex]\r\n        if (threat===2){\r\n            score+=2;\r\n        } else if(threat===21){\r\n            score +=1;\r\n        } else if(threat===31){\r\n            score+=4;\r\n        } else if(threat===3){\r\n            threeCount++;\r\n                if (threeCount===2 ){\r\n                    score+=22\r\n                } else if (threeCount>=3){\r\n                    score+=1;\r\n                } else {\r\n                    if(fourOneCount===1){\r\n                        score+=14\r\n                    } else{\r\n                        score+=8\r\n                    }                    \r\n                }             \r\n        } else if(threat===4){\r\n            fourCount++;\r\n            if (fourCount>=2 ){\r\n                score+=1\r\n            } else {\r\n                score+=32;\r\n            }\r\n        } else if(threat===41){\r\n            fourOneCount++;\r\n            if (fourOneCount===1){\r\n                if(threeCount===1){\r\n                    score+=22\r\n\r\n                }else{\r\n                    score+=16\r\n                }\r\n            } else{\r\n                score+=1\r\n            }\r\n    }   else if(threat===5){\r\n        fiveCount++;\r\n        if (fiveCount===1){\r\n            score+=128;\r\n        } else{\r\n            score+=1;\r\n        }\r\n    }\r\n}\r\n    // console.log(\"attack move evaluation:\"+score)\r\n    return score\r\n\r\n}\r\n\r\nfunction verticalCheck(rowCoord,colCoord,pieceColor,board){\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n    // console.log(\"rowIndex: \"+rowIndex)\r\n    // console.log(\"colIndex: \"+colIndex)\r\n    // console.log(\"board[rowIndex][colIndex]: \"+board[rowIndex][colIndex])\r\n    while( rowIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant!==\" \" ){\r\n            // console.log(\"check top rowIndex: \"+rowIndex)\r\n            // console.log(\"check top colIndex: \"+colIndex)\r\n            \r\n            if (occupant===pieceColor){\r\n                sameColorCount++\r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            rowIndex--;\r\n        } else {\r\n            break;\r\n        };\r\n\r\n        }\r\n\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while(rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if(occupant!==\" \"){\r\n            // console.log(\"check bot rowIndex: \"+rowIndex)\r\n            // console.log(\"check bot colIndex: \"+colIndex)\r\n            \r\n            if (occupant===pieceColor){\r\n                sameColorCount++\r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            rowIndex++;\r\n\r\n        } else{\r\n            break;\r\n        }\r\n\r\n    }\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    // console.log(\"vertical same counts: \"+counts.sameColor)\r\n    // console.log(\"vertical opposite counts: \"+counts.oppositeColor)\r\n    return counts\r\n}\r\n\r\n\r\nfunction horizontalCheck(rowCoord,colCoord,pieceColor,board){\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    // console.log(\"rowCoord: \"+rowCoord)\r\n    // console.log(\"colCoord: \"+colCoord)\r\n    // console.log(\"pieceColor: \"+pieceColor)\r\n    let occupant;\r\n    let counts;\r\n\r\n    while( colIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant!==\" \"){\r\n            \r\n            if (occupant===pieceColor){\r\n                sameColorCount++\r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            colIndex--;\r\n        } else {\r\n            break;\r\n        }\r\n\r\n    };\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while(colIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if(occupant!==\" \" ){\r\n            if (occupant===pieceColor){\r\n                sameColorCount++\r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            colIndex++;\r\n        } else {\r\n            break;\r\n        }\r\n\r\n    }\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    // console.log(\"horizontal same counts: \"+counts.sameColor)\r\n    // console.log(\"horizontal opposite counts: \"+counts.oppositeColor)\r\n    return counts\r\n}\r\n\r\n\r\nfunction leftBotToRightTopCheck (rowCoord,colCoord,pieceColor,board){\r\n\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n\r\n    //to right top\r\n        while(rowIndex>=0 && colIndex<15){\r\n            occupant=board[rowIndex][colIndex];\r\n            if(occupant!==\" \"){\r\n                \r\n                // console.log(\"rowIndex: \"+rowIndex) \r\n                // console.log(\"colIndex: \"+colIndex) \r\n                // console.log(\"occupant: \"+occupant) \r\n                if (occupant===pieceColor){\r\n                    sameColorCount++;    \r\n                    // console.log(\"sameColorCount: \"+sameColorCount)        \r\n                } else {\r\n                    oppositeColorCount++;\r\n                    break;\r\n                }\r\n                rowIndex--;\r\n                colIndex++;\r\n            } else{\r\n                break;\r\n            }\r\n\r\n    }\r\n    //to left bot\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while( colIndex>=0 && rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant!==\" \"){\r\n            if (occupant===pieceColor){\r\n                sameColorCount++;    \r\n                // console.log(count)        \r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            colIndex--;\r\n            rowIndex++;\r\n        } else{\r\n            break;\r\n        }\r\n\r\n    } \r\n\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n\r\n}\r\n\r\n\r\nfunction leftTopToRightBotCheck (rowCoord,colCoord,pieceColor,board){\r\n\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n    //to leftTop\r\n        while(rowIndex>=0 && colIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if(occupant!==\" \" ){\r\n            if (occupant===pieceColor){\r\n                sameColorCount++;    \r\n                // console.log(count)        \r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            rowIndex--;\r\n            colIndex--;\r\n        } else{\r\n            break;\r\n        }\r\n\r\n    }\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while(colIndex<15 && rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if(occupant!==\" \" ){\r\n            if (occupant===pieceColor){\r\n                sameColorCount++;    \r\n                // console.log(count)        \r\n            } else {\r\n                oppositeColorCount++;\r\n                break;\r\n            }\r\n            colIndex++;\r\n            rowIndex++;\r\n        } else{\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n}\r\n\r\nfunction threatRecognise(counts){\r\n    let sameColorCount= counts.sameColor;\r\n    let oppositeColorCount=counts.oppositeColor;\r\n    // console.log(\"threatRecognise sameColorCount: \"+sameColorCount)\r\n    // console.log(\"threatRecognise oppositeColorCount: \"+oppositeColorCount)\r\n    let threat=null;\r\n    if (sameColorCount===2 && oppositeColorCount===0){\r\n        threat=2\r\n    } else if (sameColorCount===2 && oppositeColorCount===1) {\r\n        threat=21\r\n    } else if (sameColorCount===2 && oppositeColorCount===1) {\r\n        threat=21\r\n    } else if (sameColorCount===3 && oppositeColorCount===0) {\r\n        threat=3\r\n    } else if (sameColorCount===3 && oppositeColorCount===1) {\r\n        threat=31\r\n    } else if (sameColorCount===4 && oppositeColorCount===0) {\r\n        threat=4\r\n    } else if (sameColorCount===4 && oppositeColorCount===1) {\r\n        threat=41\r\n    } else if ( sameColorCount>=5){\r\n    threat=5\r\n    }\r\n\r\nreturn threat\r\n}\r\n\r\nfunction moveEvaluation(move,pieceColor,defFactor,board){\r\n    let offenceScore=atkMoveEvaluation(move,pieceColor,board);\r\n    let oppositeColor=swapColor(pieceColor);\r\n    let boardCopy=copyTwoDimArray(board);\r\n    boardCopy[move[0]][move[1]]=oppositeColor;\r\n    let defenceScore=atkMoveEvaluation(move,oppositeColor,boardCopy)*defFactor;\r\n    let totalScore=offenceScore+defenceScore;\r\n    // let totalScore=offenceScore;\r\n    // console.log(\"moveEvaluation function score:\"+totalScore)\r\n    return totalScore;\r\n\r\n}\r\n\r\nexport default moveEvaluation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}