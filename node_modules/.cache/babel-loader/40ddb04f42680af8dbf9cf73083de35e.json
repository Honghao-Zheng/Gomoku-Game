{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\MSc project\\\\project\\\\gomoku\\\\src\\\\components\\\\gameplaypage\\\\PlayerVSComputer.jsx\",\n    _s = $RefreshSig$();\n\nimport Board from \"../Board\";\nimport { NavButton, FunctionButton } from \"../Buttons\";\nimport { putDownPiece, checkWinning } from \"../GameLogic\";\nimport { useState } from \"react\";\nimport ShowText from \"../ShowText\";\nimport chooseRandomMove from \"./AIplayers/RandomPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardArrangement1vsn\nfunction PlayerVsComputer(props) {\n  _s();\n\n  let whoPlaysFirst = props.gameSetting.whoGoFirst;\n  let AIalgorithm = props.gameSetting.computer;\n  const [turnState, setTurn] = useState({\n    isBlackTurn: true\n  });\n  const [gameState, setGame] = useState({\n    isEnded: false,\n    winner: null\n  });\n  const [moveState, setMove] = useState({\n    moveMade: []\n  });\n\n  if (whoPlaysFirst !== \"Player 1\") {\n    let moveMade = AImakeMove(AIalgorithm, \"Black\", boardArrangement1vsAI);\n    setMove({\n      moveMade: moveMade\n    });\n    setTurn({\n      isBlackTurn: turnState.isBlackTurn ? false : true\n    });\n  }\n\n  function AImakeMove(AI, turn, board) {\n    let computerMove;\n\n    if (AI === \"Random\") {\n      computerMove = chooseRandomMove(board);\n    } else if (AI === \"Minimax\") {} else if (AI === \"Greedy\") {}\n\n    putDownPiece(computerMove, turn, board);\n    return computerMove;\n  }\n\n  function handleMoveClick(clickedIntersectionCoord) {\n    let turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let rowCoord, colCoord;\n    let isMoveMade;\n    let whoWin;\n    [rowCoord, colCoord] = clickedIntersectionCoord;\n    isMoveMade = putDownPiece(clickedIntersectionCoord, turn, boardArrangement1vsAI);\n\n    if (isMoveMade) {\n      whoWin = checkWinning(turn, rowCoord, colCoord, boardArrangement1vsAI);\n\n      if (whoWin !== null) {\n        setGame({\n          isEnded: true,\n          winner: whoWin\n        });\n      }\n\n      ; // console.log(moveState.moveMade)\n\n      setMove({\n        moveMade: clickedIntersectionCoord\n      });\n      setTurn({\n        isBlackTurn: turnState.isBlackTurn ? false : true\n      });\n    }\n\n    turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let moveMade = AImakeMove(AIalgorithm, turn, boardArrangement1vsAI);\n    whoWin = checkWinning(turn, moveMade, boardArrangement1vsAI);\n\n    if (whoWin !== null) {\n      setGame({\n        isEnded: true,\n        winner: whoWin\n      });\n    }\n\n    ;\n  }\n\n  function getWinningDeclaration(whowin) {\n    if (whowin === \"B\") {\n      return \"Black piece win !\";\n    } else if (whowin === \"W\") {\n      return \"White piece win !\";\n    } else if (whowin === \"D\") {\n      return \"Game Draw\";\n    }\n  }\n\n  function resetBoard(board) {\n    let rowIndex, colIndex;\n\n    for (rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      for (colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\n        if (board[rowIndex][colIndex] !== \" \") {\n          board[rowIndex][colIndex] = \" \";\n        }\n      }\n    }\n  }\n\n  function resetGame(board) {\n    resetBoard(board);\n    setTurn({\n      isBlackTurn: true\n    });\n    setGame({\n      isEnded: false,\n      winner: null\n    });\n    setMove({\n      moveMade: []\n    });\n  }\n\n  function returnHome(board) {\n    props.onClick();\n    resetGame(board);\n  } // console.log(gameState.isEnded)\n  // console.log(gameState.winner)\n  // console.log(boardArrangement1vs1)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(NavButton, {\n        text: \"Home\",\n        onClick: () => {\n          returnHome(boardArrangement1vsAI);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Player 1 VS Player 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          boardArrangement: boardArrangement1vsAI,\n          onClick: gameState.isEnded ? null : _ref => {\n            let [rowNum, colNum] = _ref;\n            return handleMoveClick([rowNum, colNum]);\n          },\n          moveMade: moveState.moveMade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"des\",\n        children: [/*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"reset\",\n          onClick: () => resetGame(boardArrangement1vsAI)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), gameState.isEnded ? /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textRed\",\n          condition: gameState.isEnded,\n          textIfTrue: getWinningDeclaration(gameState.winner),\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: turnState.isBlackTurn,\n          textIfTrue: \"Turn: Black\",\n          textIfFalse: \"Turn: White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"Black Piece: Player 1\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"white Piece: Player 2\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerVsComputer, \"vyxZbMHQek0J23KZEW24OM9Umm8=\");\n\n_c = PlayerVsComputer;\nexport default PlayerVsComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerVsComputer\");","map":{"version":3,"names":["Board","NavButton","FunctionButton","putDownPiece","checkWinning","useState","ShowText","chooseRandomMove","boardArrangement1vsAI","PlayerVsComputer","props","whoPlaysFirst","gameSetting","whoGoFirst","AIalgorithm","computer","turnState","setTurn","isBlackTurn","gameState","setGame","isEnded","winner","moveState","setMove","moveMade","AImakeMove","AI","turn","board","computerMove","handleMoveClick","clickedIntersectionCoord","rowCoord","colCoord","isMoveMade","whoWin","getWinningDeclaration","whowin","resetBoard","rowIndex","colIndex","length","resetGame","returnHome","onClick","rowNum","colNum"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/gameplaypage/PlayerVSComputer.jsx"],"sourcesContent":["import Board from \"../Board\";\r\nimport {NavButton,FunctionButton} from \"../Buttons\";\r\n\r\nimport { putDownPiece, checkWinning } from \"../GameLogic\"\r\nimport { useState } from \"react\";\r\nimport ShowText from \"../ShowText\";\r\nimport chooseRandomMove from \"./AIplayers/RandomPlayer\"\r\nlet boardArrangement1vsAI=[\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n  ];\r\n\r\nfunction PlayerVsComputer(props){\r\n\r\n    let whoPlaysFirst=props.gameSetting.whoGoFirst;\r\n    let AIalgorithm=props.gameSetting.computer;\r\n    const [turnState,setTurn]=useState({\r\n    isBlackTurn:true\r\n  });\r\n      const [gameState,setGame]=useState({\r\n        isEnded:false,\r\n        winner:null\r\n      })\r\n      const [moveState,setMove]=useState({\r\n        moveMade:[]\r\n      })\r\n\r\n\r\n    if(whoPlaysFirst!==\"Player 1\"){\r\n        let moveMade=AImakeMove(AIalgorithm,\"Black\",boardArrangement1vsAI)\r\n        setMove({moveMade:moveMade})\r\n        setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \r\n    }\r\n\r\n    function AImakeMove(AI,turn,board){\r\n        let computerMove;\r\n        if(AI===\"Random\"){\r\n            computerMove=chooseRandomMove(board)\r\n        } else if(AI===\"Minimax\") {\r\n        } else if(AI===\"Greedy\"){\r\n        }\r\n        putDownPiece(computerMove,turn,board)\r\n        return computerMove\r\n    } \r\n\r\n\r\n    function handleMoveClick(clickedIntersectionCoord){\r\n      \r\n      let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n      let rowCoord, colCoord;\r\n      let isMoveMade;\r\n      let whoWin;\r\n\r\n      [rowCoord,colCoord]=clickedIntersectionCoord;\r\n      isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement1vsAI);\r\n      if (isMoveMade){\r\n        whoWin =checkWinning(turn,rowCoord,colCoord,boardArrangement1vsAI);\r\n        if (whoWin!==null){\r\n          setGame({\r\n            isEnded:true,\r\n            winner:whoWin\r\n          })\r\n        }; \r\n        // console.log(moveState.moveMade)\r\n        setMove({moveMade:clickedIntersectionCoord})\r\n        setTurn({isBlackTurn:turnState.isBlackTurn?false:true});       \r\n      } \r\n\r\n      turn=turnState.isBlackTurn?\"B\":\"W\"\r\n      let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement1vsAI)\r\n      whoWin =checkWinning(turn,moveMade,boardArrangement1vsAI);\r\n      if (whoWin!==null){\r\n        setGame({\r\n          isEnded:true,\r\n          winner:whoWin\r\n        })\r\n      }; \r\n    }\r\n\r\n    function getWinningDeclaration(whowin){\r\n        if (whowin===\"B\"){\r\n            return (\"Black piece win !\")\r\n        } else if(whowin===\"W\" ){\r\n            return (\"White piece win !\")\r\n        } else if (whowin===\"D\" ){\r\n            return (\"Game Draw\")\r\n        }\r\n    }\r\n\r\n    function resetBoard(board){\r\n        let rowIndex,colIndex;\r\n        for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n          for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n            if(board[rowIndex][colIndex]!==\" \"){\r\n                board[rowIndex][colIndex]=\" \"\r\n            }\r\n          }\r\n                   \r\n        }\r\n    }\r\n\r\n    function resetGame(board){\r\n        resetBoard(board)\r\n        setTurn({isBlackTurn:true})\r\n        setGame({isEnded:false, winner:null})\r\n        setMove({moveMade:[]})\r\n    }\r\n\r\n    function returnHome(board){\r\n      props.onClick();\r\n      resetGame(board)\r\n    }\r\n\r\n\r\n    // console.log(gameState.isEnded)\r\n    // console.log(gameState.winner)\r\n    // console.log(boardArrangement1vs1)\r\n    return(\r\n        <div>\r\n        <div className=\"rows\">\r\n        <NavButton text=\"Home\" onClick={()=>{\r\n                returnHome(boardArrangement1vsAI)\r\n            }}/>\r\n\r\n            <h1>Player 1 VS Player 2</h1>\r\n        </div>\r\n        \r\n\r\n        <div className=\"gameScreen\">\r\n\r\n                <div className=\"gameboard\">        \r\n                    <Board\r\n                        boardArrangement={boardArrangement1vsAI}\r\n                        onClick={gameState.isEnded?\r\n                                    null:\r\n                                    ([rowNum,colNum])=>handleMoveClick([rowNum,colNum])}\r\n                        moveMade={moveState.moveMade}\r\n                        />\r\n                </div>\r\n                <div className=\"des\">\r\n                \r\n                    <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement1vsAI)}/>\r\n                    {\r\n                    gameState.isEnded?\r\n                    <ShowText textColour=\"textRed\"\r\n                        condition={gameState.isEnded}\r\n                        textIfTrue={getWinningDeclaration(gameState.winner)}\r\n                        textIfFalse=\"\"\r\n                     />:\r\n                   <ShowText textColour=\"textBlack\"\r\n                        condition={turnState.isBlackTurn}\r\n                        textIfTrue=\"Turn: Black\"\r\n                        textIfFalse=\"Turn: White\"\r\n                    />\r\n                    }\r\n                    <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"Black Piece: Player 1\"\r\n                        textIfFalse=\"\"\r\n                    />\r\n                       <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"white Piece: Player 2\"\r\n                        textIfFalse=\"\"\r\n                    />                  \r\n                </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerVsComputer;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,SAAR,EAAkBC,cAAlB,QAAuC,YAAvC;AAEA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,cAA3C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;;AACA,IAAIC,qBAAqB,GAAC,CACtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CADsB,EAEtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAFsB,EAGtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAHsB,EAItB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAJsB,EAKtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CALsB,EAMtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CANsB,EAOtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAPsB,EAQtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CARsB,EAStB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CATsB,EAUtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAVsB,EAWtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAXsB,EAYtB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAZsB,EAatB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAbsB,EActB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAdsB,EAetB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,CAfsB,CAA1B;;AAkBA,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;EAAA;;EAE5B,IAAIC,aAAa,GAACD,KAAK,CAACE,WAAN,CAAkBC,UAApC;EACA,IAAIC,WAAW,GAACJ,KAAK,CAACE,WAAN,CAAkBG,QAAlC;EACA,MAAM,CAACC,SAAD,EAAWC,OAAX,IAAoBZ,QAAQ,CAAC;IACnCa,WAAW,EAAC;EADuB,CAAD,CAAlC;EAGE,MAAM,CAACC,SAAD,EAAWC,OAAX,IAAoBf,QAAQ,CAAC;IACjCgB,OAAO,EAAC,KADyB;IAEjCC,MAAM,EAAC;EAF0B,CAAD,CAAlC;EAIA,MAAM,CAACC,SAAD,EAAWC,OAAX,IAAoBnB,QAAQ,CAAC;IACjCoB,QAAQ,EAAC;EADwB,CAAD,CAAlC;;EAKF,IAAGd,aAAa,KAAG,UAAnB,EAA8B;IAC1B,IAAIc,QAAQ,GAACC,UAAU,CAACZ,WAAD,EAAa,OAAb,EAAqBN,qBAArB,CAAvB;IACAgB,OAAO,CAAC;MAACC,QAAQ,EAACA;IAAV,CAAD,CAAP;IACAR,OAAO,CAAC;MAACC,WAAW,EAACF,SAAS,CAACE,WAAV,GAAsB,KAAtB,GAA4B;IAAzC,CAAD,CAAP;EACH;;EAED,SAASQ,UAAT,CAAoBC,EAApB,EAAuBC,IAAvB,EAA4BC,KAA5B,EAAkC;IAC9B,IAAIC,YAAJ;;IACA,IAAGH,EAAE,KAAG,QAAR,EAAiB;MACbG,YAAY,GAACvB,gBAAgB,CAACsB,KAAD,CAA7B;IACH,CAFD,MAEO,IAAGF,EAAE,KAAG,SAAR,EAAmB,CACzB,CADM,MACA,IAAGA,EAAE,KAAG,QAAR,EAAiB,CACvB;;IACDxB,YAAY,CAAC2B,YAAD,EAAcF,IAAd,EAAmBC,KAAnB,CAAZ;IACA,OAAOC,YAAP;EACH;;EAGD,SAASC,eAAT,CAAyBC,wBAAzB,EAAkD;IAEhD,IAAIJ,IAAI,GAACZ,SAAS,CAACE,WAAV,GAAsB,GAAtB,GAA0B,GAAnC;IACA,IAAIe,QAAJ,EAAcC,QAAd;IACA,IAAIC,UAAJ;IACA,IAAIC,MAAJ;IAEA,CAACH,QAAD,EAAUC,QAAV,IAAoBF,wBAApB;IACAG,UAAU,GAAGhC,YAAY,CAAC6B,wBAAD,EAA0BJ,IAA1B,EAA+BpB,qBAA/B,CAAzB;;IACA,IAAI2B,UAAJ,EAAe;MACbC,MAAM,GAAEhC,YAAY,CAACwB,IAAD,EAAMK,QAAN,EAAeC,QAAf,EAAwB1B,qBAAxB,CAApB;;MACA,IAAI4B,MAAM,KAAG,IAAb,EAAkB;QAChBhB,OAAO,CAAC;UACNC,OAAO,EAAC,IADF;UAENC,MAAM,EAACc;QAFD,CAAD,CAAP;MAID;;MAAA,CAPY,CAQb;;MACAZ,OAAO,CAAC;QAACC,QAAQ,EAACO;MAAV,CAAD,CAAP;MACAf,OAAO,CAAC;QAACC,WAAW,EAACF,SAAS,CAACE,WAAV,GAAsB,KAAtB,GAA4B;MAAzC,CAAD,CAAP;IACD;;IAEDU,IAAI,GAACZ,SAAS,CAACE,WAAV,GAAsB,GAAtB,GAA0B,GAA/B;IACA,IAAIO,QAAQ,GAACC,UAAU,CAACZ,WAAD,EAAac,IAAb,EAAkBpB,qBAAlB,CAAvB;IACA4B,MAAM,GAAEhC,YAAY,CAACwB,IAAD,EAAMH,QAAN,EAAejB,qBAAf,CAApB;;IACA,IAAI4B,MAAM,KAAG,IAAb,EAAkB;MAChBhB,OAAO,CAAC;QACNC,OAAO,EAAC,IADF;QAENC,MAAM,EAACc;MAFD,CAAD,CAAP;IAID;;IAAA;EACF;;EAED,SAASC,qBAAT,CAA+BC,MAA/B,EAAsC;IAClC,IAAIA,MAAM,KAAG,GAAb,EAAiB;MACb,OAAQ,mBAAR;IACH,CAFD,MAEO,IAAGA,MAAM,KAAG,GAAZ,EAAiB;MACpB,OAAQ,mBAAR;IACH,CAFM,MAEA,IAAIA,MAAM,KAAG,GAAb,EAAkB;MACrB,OAAQ,WAAR;IACH;EACJ;;EAED,SAASC,UAAT,CAAoBV,KAApB,EAA0B;IACtB,IAAIW,QAAJ,EAAaC,QAAb;;IACA,KAAKD,QAAQ,GAAC,CAAd,EAAgBA,QAAQ,GAACX,KAAK,CAACa,MAA/B,EAAsCF,QAAQ,EAA9C,EAAiD;MAC/C,KAAKC,QAAQ,GAAC,CAAd,EAAgBA,QAAQ,GAACZ,KAAK,CAACW,QAAD,CAAL,CAAgBE,MAAzC,EAAgDD,QAAQ,EAAxD,EAA2D;QACzD,IAAGZ,KAAK,CAACW,QAAD,CAAL,CAAgBC,QAAhB,MAA4B,GAA/B,EAAmC;UAC/BZ,KAAK,CAACW,QAAD,CAAL,CAAgBC,QAAhB,IAA0B,GAA1B;QACH;MACF;IAEF;EACJ;;EAED,SAASE,SAAT,CAAmBd,KAAnB,EAAyB;IACrBU,UAAU,CAACV,KAAD,CAAV;IACAZ,OAAO,CAAC;MAACC,WAAW,EAAC;IAAb,CAAD,CAAP;IACAE,OAAO,CAAC;MAACC,OAAO,EAAC,KAAT;MAAgBC,MAAM,EAAC;IAAvB,CAAD,CAAP;IACAE,OAAO,CAAC;MAACC,QAAQ,EAAC;IAAV,CAAD,CAAP;EACH;;EAED,SAASmB,UAAT,CAAoBf,KAApB,EAA0B;IACxBnB,KAAK,CAACmC,OAAN;IACAF,SAAS,CAACd,KAAD,CAAT;EACD,CAnG2B,CAsG5B;EACA;EACA;;;EACA,oBACI;IAAA,wBACA;MAAK,SAAS,EAAC,MAAf;MAAA,wBACA,QAAC,SAAD;QAAW,IAAI,EAAC,MAAhB;QAAuB,OAAO,EAAE,MAAI;UAC5Be,UAAU,CAACpC,qBAAD,CAAV;QACH;MAFL;QAAA;QAAA;QAAA;MAAA,QADA,eAKI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,eAUA;MAAK,SAAS,EAAC,YAAf;MAAA,wBAEQ;QAAK,SAAS,EAAC,WAAf;QAAA,uBACI,QAAC,KAAD;UACI,gBAAgB,EAAEA,qBADtB;UAEI,OAAO,EAAEW,SAAS,CAACE,OAAV,GACG,IADH,GAEG;YAAA,IAAC,CAACyB,MAAD,EAAQC,MAAR,CAAD;YAAA,OAAmBhB,eAAe,CAAC,CAACe,MAAD,EAAQC,MAAR,CAAD,CAAlC;UAAA,CAJhB;UAKI,QAAQ,EAAExB,SAAS,CAACE;QALxB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAFR,eAWQ;QAAK,SAAS,EAAC,KAAf;QAAA,wBAEI,QAAC,cAAD;UAAgB,IAAI,EAAC,OAArB;UAA6B,OAAO,EAAE,MAAIkB,SAAS,CAACnC,qBAAD;QAAnD;UAAA;UAAA;UAAA;QAAA,QAFJ,EAIIW,SAAS,CAACE,OAAV,gBACA,QAAC,QAAD;UAAU,UAAU,EAAC,SAArB;UACI,SAAS,EAAEF,SAAS,CAACE,OADzB;UAEI,UAAU,EAAEgB,qBAAqB,CAAClB,SAAS,CAACG,MAAX,CAFrC;UAGI,WAAW,EAAC;QAHhB;UAAA;UAAA;UAAA;QAAA,QADA,gBAMD,QAAC,QAAD;UAAU,UAAU,EAAC,WAArB;UACK,SAAS,EAAEN,SAAS,CAACE,WAD1B;UAEK,UAAU,EAAC,aAFhB;UAGK,WAAW,EAAC;QAHjB;UAAA;UAAA;UAAA;QAAA,QAVH,eAgBI,QAAC,QAAD;UAAU,UAAU,EAAC,WAArB;UACI,SAAS,EAAE,IADf;UAEI,UAAU,EAAC,uBAFf;UAGI,WAAW,EAAC;QAHhB;UAAA;UAAA;UAAA;QAAA,QAhBJ,eAqBO,QAAC,QAAD;UAAU,UAAU,EAAC,WAArB;UACC,SAAS,EAAE,IADZ;UAEC,UAAU,EAAC,uBAFZ;UAGC,WAAW,EAAC;QAHb;UAAA;UAAA;UAAA;QAAA,QArBP;MAAA;QAAA;QAAA;QAAA;MAAA,QAXR;IAAA;MAAA;MAAA;MAAA;IAAA,QAVA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAqDH;;GA9JQT,gB;;KAAAA,gB;AAgKT,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}