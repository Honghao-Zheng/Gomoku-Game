{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\hxz157\\\\gomoku\\\\src\\\\components\\\\gameplaypage\\\\ComputerVsComputer.jsx\",\n    _s = $RefreshSig$();\n\nimport Board from \"../Board\";\nimport { NavButton, FunctionButton } from \"../Buttons\";\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\";\nimport { putDownPiece, checkWinning } from \"../GameLogic\";\nimport { useState } from \"react\";\nimport ShowText from \"../ShowText\";\nimport GAmove from \"../AIplayers/GA/GAalgorithm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardArrangement = [[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"]];\nlet depth = 5;\n\nfunction ComputerVsComputer(props) {\n  _s();\n\n  let whoPlaysFirst = props.settings.whoGoFirst;\n  let AI1 = props.settings.computer1;\n  let AI2 = props.settings.computer2;\n  let AI1PieceColour;\n  let textBlackC1, textBlackC2, textWhiteC1, textWhiteC2;\n\n  if (whoPlaysFirst === \"Computer 1\") {\n    AI1PieceColour = \"B\";\n    textBlackC1 = \"Black Piece: Computer 1 (\" + AI1 + \")\";\n    textWhiteC2 = \"White Piece: Computer 2 (\" + AI2 + \")\";\n  } else {\n    AI1PieceColour = \"W\";\n  }\n\n  textBlackC2 = \"Black Piece: Computer 2 (\" + AI2 + \")\";\n  textWhiteC1 = \"White Piece: Computer 1 (\" + AI1 + \")\";\n  const [turnState, setTurn] = useState({\n    isBlackTurn: true\n  });\n  const [gameState, setGame] = useState({\n    isStarted: false,\n    isEnded: false,\n    winner: null\n  });\n  const [moveState, setMove] = useState({\n    moveMade: []\n  });\n\n  function AImakeMove(AI, turn, board) {\n    let computerMove;\n\n    if (AI === \"Random\") {\n      computerMove = chooseRandomMove(board);\n    } else if (AI === \"Minimax\") {} else if (AI === \"Genetic\") {\n      computerMove = GAmove(depth, turn, board);\n    }\n\n    putDownPiece(computerMove, turn, board);\n    return computerMove;\n  }\n\n  function handleMoveClick(clickedIntersectionCoord) {\n    let AIalgorithm;\n    let turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let isMoveMade;\n    let whoWin; //if it is AI1's turn, then use AI1's algorithm\n\n    if (AI1PieceColour === turn) {\n      AIalgorithm = AI1;\n    } else {\n      AIalgorithm = AI2;\n    } // console.log(moveState.moveMade)\n    // setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\n\n\n    let moveMade = AImakeMove(AIalgorithm, turn, boardArrangement);\n    whoWin = checkWinning(turn, moveMade, boardArrangement);\n\n    if (whoWin !== null) {\n      setGame({\n        isStarted: gameState.isStarted,\n        isEnded: true,\n        winner: whoWin\n      });\n    }\n\n    ;\n    setMove({\n      moveMade: moveMade\n    });\n    setTurn({\n      isBlackTurn: turnState.isBlackTurn ? false : true\n    });\n  }\n\n  function getWinningDeclaration(whowin) {\n    if (whowin === \"B\") {\n      return \"Black piece win !\";\n    } else if (whowin === \"W\") {\n      return \"White piece win !\";\n    } else if (whowin === \"D\") {\n      return \"Game Draw\";\n    }\n  }\n\n  function resetBoard(board) {\n    let rowIndex, colIndex;\n\n    for (rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      for (colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\n        if (board[rowIndex][colIndex] !== \" \") {\n          board[rowIndex][colIndex] = \" \";\n        }\n      }\n    }\n  }\n\n  function resetGame(board) {\n    resetBoard(board);\n    setTurn({\n      isBlackTurn: true\n    });\n    setGame({\n      isStarted: false,\n      isEnded: false,\n      winner: null\n    });\n    setMove({\n      moveMade: []\n    });\n  }\n\n  function returnHome(board) {\n    props.onClickHome();\n    resetGame(board);\n  }\n\n  function startGame(whoPlaysFirst) {\n    console.log(whoPlaysFirst);\n    console.log(AI1);\n    console.log(AI2);\n\n    if (whoPlaysFirst !== \"Player 1\") {\n      let moveMade = AImakeMove(AI1, \"B\", boardArrangement); // console.log(moveMade)\n\n      setMove({\n        moveMade: moveMade\n      });\n      setTurn({\n        isBlackTurn: turnState.isBlackTurn ? false : true\n      });\n    }\n\n    setGame({\n      isStarted: true,\n      isEnded: false,\n      winner: null\n    });\n  }\n\n  function isGamePlayEnabled() {\n    if (!gameState.isEnded && gameState.isStarted) {\n      return true;\n    } else {\n      return false;\n    }\n  } // console.log(gameState.isEnded)\n  // console.log(gameState.winner)\n  // console.log(boardArrangement1vs1)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(NavButton, {\n        text: \"Home\",\n        onClick: () => {\n          returnHome(boardArrangement);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Computer VS Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          boardArrangement: boardArrangement,\n          onClick: isGamePlayEnabled() ? _ref => {\n            let [rowNum, colNum] = _ref;\n            return handleMoveClick([rowNum, colNum]);\n          } : null,\n          moveMade: moveState.moveMade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"des\",\n        children: [gameState.isStarted ? /*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"reset\",\n          onClick: () => resetGame(boardArrangement)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"start\",\n          onClick: () => {\n            startGame(whoPlaysFirst);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), gameState.isEnded ? /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textRed\",\n          condition: gameState.isEnded,\n          textIfTrue: getWinningDeclaration(gameState.winner),\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: turnState.isBlackTurn,\n          textIfTrue: \"Turn: Black\",\n          textIfFalse: \"Turn: White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: whoPlaysFirst === \"Computer 1\",\n          textIfTrue: textBlackC1,\n          textIfFalse: textBlackC2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: whoPlaysFirst !== \"Computer 1\",\n          textIfTrue: textWhiteC1,\n          textIfFalse: textWhiteC2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ComputerVsComputer, \"vIDKjfjfFwHdInCWBE2twI6n7V0=\");\n\n_c = ComputerVsComputer;\nexport default ComputerVsComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerVsComputer\");","map":{"version":3,"names":["Board","NavButton","FunctionButton","chooseRandomMove","putDownPiece","checkWinning","useState","ShowText","GAmove","boardArrangement","depth","ComputerVsComputer","props","whoPlaysFirst","settings","whoGoFirst","AI1","computer1","AI2","computer2","AI1PieceColour","textBlackC1","textBlackC2","textWhiteC1","textWhiteC2","turnState","setTurn","isBlackTurn","gameState","setGame","isStarted","isEnded","winner","moveState","setMove","moveMade","AImakeMove","AI","turn","board","computerMove","handleMoveClick","clickedIntersectionCoord","AIalgorithm","isMoveMade","whoWin","getWinningDeclaration","whowin","resetBoard","rowIndex","colIndex","length","resetGame","returnHome","onClickHome","startGame","console","log","isGamePlayEnabled","rowNum","colNum"],"sources":["C:/Users/Jason/Desktop/hxz157/gomoku/src/components/gameplaypage/ComputerVsComputer.jsx"],"sourcesContent":["\r\n\r\nimport Board from \"../Board\";\r\nimport {NavButton,FunctionButton} from \"../Buttons\";\r\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\"\r\nimport { putDownPiece, checkWinning } from \"../GameLogic\"\r\nimport { useState } from \"react\";\r\nimport ShowText from \"../ShowText\";\r\nimport GAmove from \"../AIplayers/GA/GAalgorithm\"\r\nlet boardArrangement=[\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n  ];\r\n  let depth=5;\r\nfunction ComputerVsComputer(props){\r\n    let whoPlaysFirst=props.settings.whoGoFirst;\r\n    let AI1=props.settings.computer1;    \r\n    let AI2=props.settings.computer2;  \r\n    let AI1PieceColour;\r\n    let textBlackC1,textBlackC2,textWhiteC1,textWhiteC2;\r\n    if (whoPlaysFirst===\"Computer 1\"){\r\n      AI1PieceColour=\"B\";\r\n      textBlackC1=\"Black Piece: Computer 1 (\"+AI1+\")\";\r\n      textWhiteC2=\"White Piece: Computer 2 (\"+AI2+\")\";\r\n    } else {AI1PieceColour=\"W\"}\r\n    textBlackC2=\"Black Piece: Computer 2 (\"+AI2+\")\";\r\n    textWhiteC1=\"White Piece: Computer 1 (\"+AI1+\")\";\r\n    const [turnState,setTurn]=useState({\r\n    isBlackTurn:true\r\n  });\r\n      const [gameState,setGame]=useState({\r\n        isStarted:false,\r\n        isEnded:false,\r\n        winner:null\r\n      })\r\n      const [moveState,setMove]=useState({\r\n        moveMade:[]\r\n      })\r\n\r\n\r\n\r\n    function AImakeMove(AI,turn,board){\r\n        let computerMove;\r\n        if(AI===\"Random\"){\r\n            computerMove=chooseRandomMove(board)\r\n        } else if(AI===\"Minimax\") {\r\n        } else if(AI===\"Genetic\"){\r\n            computerMove=GAmove(depth,turn,board)\r\n        }\r\n        putDownPiece(computerMove,turn,board)\r\n        return computerMove\r\n    } \r\n    function handleMoveClick(clickedIntersectionCoord){\r\n        let AIalgorithm;\r\n      let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n      let isMoveMade;\r\n      let whoWin;\r\n\r\n//if it is AI1's turn, then use AI1's algorithm\r\n      if(AI1PieceColour===turn){\r\n        AIalgorithm=AI1;\r\n        } else{\r\n        AIalgorithm=AI2;\r\n        } \r\n      \r\n\r\n        // console.log(moveState.moveMade)\r\n        // setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\r\n\r\n      let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement)\r\n      whoWin =checkWinning(turn,moveMade,boardArrangement);\r\n      if (whoWin!==null){\r\n        setGame({\r\n            isStarted:gameState.isStarted,\r\n          isEnded:true,\r\n          winner:whoWin\r\n        })\r\n      }; \r\n      setMove({moveMade:moveMade})\r\n      setTurn({isBlackTurn:turnState.isBlackTurn?false:true})\r\n      \r\n    }\r\n\r\n    function getWinningDeclaration(whowin){\r\n        if (whowin===\"B\"){\r\n            return (\"Black piece win !\")\r\n        } else if(whowin===\"W\" ){\r\n            return (\"White piece win !\")\r\n        } else if (whowin===\"D\" ){\r\n            return (\"Game Draw\")\r\n        }\r\n    }\r\n\r\n    function resetBoard(board){\r\n        let rowIndex,colIndex;\r\n        for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n          for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n            if(board[rowIndex][colIndex]!==\" \"){\r\n                board[rowIndex][colIndex]=\" \"\r\n            }\r\n          }\r\n                   \r\n        }\r\n    }\r\n\r\n    function resetGame(board){\r\n        resetBoard(board)\r\n        setTurn({isBlackTurn:true})\r\n        setGame({isStarted:false, isEnded:false, winner:null})\r\n        setMove({moveMade:[]})\r\n    }\r\n\r\n    function returnHome(board){\r\n      props.onClickHome();\r\n      resetGame(board)\r\n    }\r\n\r\n    function startGame(whoPlaysFirst){\r\n        console.log(whoPlaysFirst)\r\n        console.log(AI1)\r\n        console.log(AI2)\r\n        if(whoPlaysFirst!==\"Player 1\"){          \r\n            let moveMade=AImakeMove(AI1,\"B\",boardArrangement)\r\n            // console.log(moveMade)\r\n            setMove({moveMade:moveMade});\r\n            setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \r\n\r\n        }\r\n        setGame({\r\n            isStarted:true,isEnded:false,winner:null\r\n        })\r\n    }\r\n\r\n    function isGamePlayEnabled(){\r\n        if(!gameState.isEnded && gameState.isStarted){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    // console.log(gameState.isEnded)\r\n    // console.log(gameState.winner)\r\n    // console.log(boardArrangement1vs1)\r\n    return(\r\n        <div>\r\n        <div className=\"rows\">\r\n        <NavButton text=\"Home\" onClick={()=>{\r\n                returnHome(boardArrangement)\r\n            }}/>\r\n\r\n            <h1>Computer VS Computer</h1>\r\n        </div>\r\n        \r\n\r\n        <div className=\"gameScreen\">\r\n\r\n                <div className=\"gameboard\">        \r\n                    <Board\r\n                        boardArrangement={boardArrangement}\r\n                        onClick={isGamePlayEnabled()?\r\n                            ([rowNum,colNum])=>handleMoveClick([rowNum,colNum]):\r\n                                    null}\r\n                        moveMade={moveState.moveMade}\r\n                        />\r\n                </div>\r\n                <div className=\"des\">\r\n                \r\n                    {gameState.isStarted?\r\n                    <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement)}/>:\r\n                    <FunctionButton text=\"start\" onClick={()=>{\r\n                        startGame(whoPlaysFirst)\r\n                    }} />\r\n                    }\r\n                    {\r\n                    gameState.isEnded?\r\n                    <ShowText textColour=\"textRed\"\r\n                        condition={gameState.isEnded}\r\n                        textIfTrue={getWinningDeclaration(gameState.winner)}\r\n                        textIfFalse=\"\"\r\n                     />:\r\n                   <ShowText textColour=\"textBlack\"\r\n                        condition={turnState.isBlackTurn}\r\n                        textIfTrue=\"Turn: Black\"\r\n                        textIfFalse=\"Turn: White\"\r\n                    />\r\n                    }\r\n                    <ShowText textColour=\"textBlack\"\r\n                        condition={whoPlaysFirst===\"Computer 1\"}\r\n                        textIfTrue={textBlackC1}\r\n                        textIfFalse={textBlackC2}\r\n                    />\r\n                       <ShowText textColour=\"textBlack\"\r\n                        condition={whoPlaysFirst!==\"Computer 1\"}\r\n                        textIfTrue={textWhiteC1}\r\n                        textIfFalse={textWhiteC2}\r\n                    />                  \r\n                </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComputerVsComputer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}