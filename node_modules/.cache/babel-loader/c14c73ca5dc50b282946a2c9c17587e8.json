{"ast":null,"code":"//jshint esversion:6\nfunction isArrayEqualArray(array1, array2) {\n  if (array1.length === array2.length) {\n    let index;\n\n    for (index = 0; index < array1.length; index++) {\n      if (array1[index] !== array2[index]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction arraysHasArray(collectionOfArrays, singleArray) {\n  let index;\n\n  for (index = 0; index < collectionOfArrays.length; index++) {\n    if (isArrayEqualArray(collectionOfArrays[index], singleArray)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction copyTwoDimArray(array) {\n  let twoDimArray = [];\n  let rowArray = [];\n  let rowIndex, colIndex;\n\n  for (rowIndex = 0; rowIndex < array.length; rowIndex++) {\n    for (colIndex = 0; colIndex < array.length; colIndex++) {\n      rowArray.push(array[rowIndex][colIndex]);\n    }\n\n    twoDimArray.push(rowArray);\n    rowArray = [];\n  }\n\n  return twoDimArray;\n} //choose a uniform random number between 0 and max-1\n\n\nfunction random(max) {\n  const num = Math.floor(Math.random() * max);\n  return num;\n}\n\nfunction shuffle(arr) {\n  let arrIndex;\n  let randomNum;\n  let temp;\n\n  for (arrIndex = arr.length - 1; arrIndex > 0; arrIndex--) {\n    randomNum = random(arrIndex + 1);\n    temp = arr[arrIndex];\n    arr[arrIndex] = arr[temp];\n    arr[randomNum] = temp;\n  }\n\n  return array;\n}\n\nexport { arraysHasArray, isArrayEqualArray, copyTwoDimArray, random };","map":{"version":3,"names":["isArrayEqualArray","array1","array2","length","index","arraysHasArray","collectionOfArrays","singleArray","copyTwoDimArray","array","twoDimArray","rowArray","rowIndex","colIndex","push","random","max","num","Math","floor","shuffle","arr","arrIndex","randomNum","temp"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/GeneralAlgorithms.jsx"],"sourcesContent":["//jshint esversion:6\r\nfunction isArrayEqualArray(array1,array2){\r\n  if (array1.length===array2.length){\r\n\r\n    let index;\r\n    for(index=0;index<array1.length;index++){\r\n      if (array1[index] !==array2[index]){\r\n        return (false);\r\n      }\r\n    }\r\n    \r\n    return (true);\r\n}\r\n\r\n}\r\n\r\n  function arraysHasArray(collectionOfArrays,singleArray){\r\n    let index;\r\n    for (index=0;index<collectionOfArrays.length;index++){\r\n      if (isArrayEqualArray(collectionOfArrays[index],singleArray)){\r\n        return (true);\r\n      }\r\n    }\r\n    return (false);\r\n  }\r\n\r\n\r\n  function copyTwoDimArray(array){\r\n    let twoDimArray=[];\r\n    let rowArray=[];\r\n    let rowIndex,colIndex;\r\n    for (rowIndex=0;rowIndex<array.length;rowIndex++){\r\n      for (colIndex=0;colIndex<array.length;colIndex++){\r\n        rowArray.push(array[rowIndex][colIndex])\r\n      }\r\n      twoDimArray.push(rowArray)\r\n      rowArray=[]\r\n    }\r\n    return twoDimArray;\r\n  }\r\n  \r\n  //choose a uniform random number between 0 and max-1\r\n  function random(max) {\r\n    const num = Math.floor(Math.random() * (max));\r\n    return num;\r\n  }\r\n\r\n  function shuffle(arr) {\r\n    let arrIndex;\r\n    let randomNum;\r\n    let temp;\r\n    for (arrIndex = arr.length - 1; arrIndex > 0; arrIndex--) {\r\n    \r\n      randomNum = random(arrIndex+1)\r\n            \r\n      temp = arr[arrIndex];\r\n      arr[arrIndex] = arr[temp];\r\n      arr[randomNum] = temp;\r\n    }\r\n      \r\n    return array;\r\n    }\r\n    \r\n\r\n\r\nexport {arraysHasArray,isArrayEqualArray,copyTwoDimArray,random};\r\n"],"mappings":"AAAA;AACA,SAASA,iBAAT,CAA2BC,MAA3B,EAAkCC,MAAlC,EAAyC;EACvC,IAAID,MAAM,CAACE,MAAP,KAAgBD,MAAM,CAACC,MAA3B,EAAkC;IAEhC,IAAIC,KAAJ;;IACA,KAAIA,KAAK,GAAC,CAAV,EAAYA,KAAK,GAACH,MAAM,CAACE,MAAzB,EAAgCC,KAAK,EAArC,EAAwC;MACtC,IAAIH,MAAM,CAACG,KAAD,CAAN,KAAiBF,MAAM,CAACE,KAAD,CAA3B,EAAmC;QACjC,OAAQ,KAAR;MACD;IACF;;IAED,OAAQ,IAAR;EACH;AAEA;;AAEC,SAASC,cAAT,CAAwBC,kBAAxB,EAA2CC,WAA3C,EAAuD;EACrD,IAAIH,KAAJ;;EACA,KAAKA,KAAK,GAAC,CAAX,EAAaA,KAAK,GAACE,kBAAkB,CAACH,MAAtC,EAA6CC,KAAK,EAAlD,EAAqD;IACnD,IAAIJ,iBAAiB,CAACM,kBAAkB,CAACF,KAAD,CAAnB,EAA2BG,WAA3B,CAArB,EAA6D;MAC3D,OAAQ,IAAR;IACD;EACF;;EACD,OAAQ,KAAR;AACD;;AAGD,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;EAC7B,IAAIC,WAAW,GAAC,EAAhB;EACA,IAAIC,QAAQ,GAAC,EAAb;EACA,IAAIC,QAAJ,EAAaC,QAAb;;EACA,KAAKD,QAAQ,GAAC,CAAd,EAAgBA,QAAQ,GAACH,KAAK,CAACN,MAA/B,EAAsCS,QAAQ,EAA9C,EAAiD;IAC/C,KAAKC,QAAQ,GAAC,CAAd,EAAgBA,QAAQ,GAACJ,KAAK,CAACN,MAA/B,EAAsCU,QAAQ,EAA9C,EAAiD;MAC/CF,QAAQ,CAACG,IAAT,CAAcL,KAAK,CAACG,QAAD,CAAL,CAAgBC,QAAhB,CAAd;IACD;;IACDH,WAAW,CAACI,IAAZ,CAAiBH,QAAjB;IACAA,QAAQ,GAAC,EAAT;EACD;;EACD,OAAOD,WAAP;AACD,C,CAED;;;AACA,SAASK,MAAT,CAAgBC,GAAhB,EAAqB;EACnB,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,MAAL,KAAiBC,GAA5B,CAAZ;EACA,OAAOC,GAAP;AACD;;AAED,SAASG,OAAT,CAAiBC,GAAjB,EAAsB;EACpB,IAAIC,QAAJ;EACA,IAAIC,SAAJ;EACA,IAAIC,IAAJ;;EACA,KAAKF,QAAQ,GAAGD,GAAG,CAAClB,MAAJ,GAAa,CAA7B,EAAgCmB,QAAQ,GAAG,CAA3C,EAA8CA,QAAQ,EAAtD,EAA0D;IAExDC,SAAS,GAAGR,MAAM,CAACO,QAAQ,GAAC,CAAV,CAAlB;IAEAE,IAAI,GAAGH,GAAG,CAACC,QAAD,CAAV;IACAD,GAAG,CAACC,QAAD,CAAH,GAAgBD,GAAG,CAACG,IAAD,CAAnB;IACAH,GAAG,CAACE,SAAD,CAAH,GAAiBC,IAAjB;EACD;;EAED,OAAOf,KAAP;AACC;;AAIL,SAAQJ,cAAR,EAAuBL,iBAAvB,EAAyCQ,eAAzC,EAAyDO,MAAzD"},"metadata":{},"sourceType":"module"}