{"ast":null,"code":"//jshint esversion:6\n\n/*change the board arrangement by modifying the two diementional arrays\r\nif it is a legal move such that the piece is placed in an unoccupied intersection,\r\noutput true\r\n*/\nfunction putDownPiece(coord, whoTurn, board) {\n  var rowCoord = coord[0];\n  var colCoord = coord[1];\n\n  if (board[rowCoord][colCoord] === \" \") {\n    board[rowCoord][colCoord] = whoTurn;\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction avalibleMoves(board) {\n  let avalibleMoves = [];\n  let row, col;\n\n  for (row = 0; row < board.length; row++) {\n    for (col = 0; col < board[row].length; col++) {\n      if (board[row][col] === \" \") {\n        avalibleMoves.push([row, col]);\n      }\n    }\n  }\n\n  return avalibleMoves;\n}\n\nfunction checkDraw(board) {\n  let possibleMoves = avalibleMoves(board);\n\n  if (possibleMoves.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction leftToRightCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let colIndex;\n  count = -1; //since it will count itself twice and it will outside of range if we set \n  //colIndex=pieceColCoord-1 for pieceColCoord=0\n\n  colIndex = pieceColCoord;\n\n  for (colIndex = pieceColCoord; colIndex < pieceColCoord + 5 && colIndex < 15; colIndex++) {\n    if (board[pieceRowCoord][colIndex] === pieceColour) {\n      count++;\n    } else {\n      break;\n    }\n  }\n\n  colIndex = pieceColCoord;\n\n  for (colIndex = pieceColCoord; colIndex > pieceColCoord - 5 && colIndex >= 0; colIndex--) {\n    if (board[pieceRowCoord][colIndex] === pieceColour) {\n      count++;\n    } else {\n      break;\n    }\n  } // console.log(count)\n\n\n  if (count >= 5) {\n    // console.log(pieceColour)\n    return pieceColour;\n  }\n\n  return null;\n}\n\nfunction leftBottoRightTopCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex = pieceRowCoord;\n  let colIndex = pieceColCoord;\n  count = -1;\n\n  while (rowInex > pieceRowCoord - 5 && rowInex >= 0 && colIndex < pieceColCoord + 5 && colIndex < 15) {\n    if (board[rowInex][colIndex] === pieceColour) {\n      count++; // console.log(count)        \n    } else {\n      break;\n    }\n\n    rowInex--;\n    colIndex++;\n  }\n\n  rowInex = pieceRowCoord;\n  colIndex = pieceColCoord;\n\n  while (colIndex > pieceColCoord - 5 && colIndex >= 0 && rowInex < pieceRowCoord + 5 && rowInex < 15) {\n    if (board[rowInex][colIndex] === pieceColour) {\n      count++; // console.log(count)       \n    } else {\n      break;\n    }\n\n    colIndex--;\n    rowInex++;\n  } // console.log(count)\n\n\n  if (count >= 5) {\n    // console.log(pieceColour)\n    return pieceColour;\n  }\n\n  return null;\n}\n\nfunction topToBotCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowIndex = pieceRowCoord;\n  count = -1;\n\n  for (rowIndex = pieceRowCoord; rowIndex > pieceRowCoord - 5 && rowIndex >= 0; rowIndex--) {\n    if (board[rowIndex][pieceColCoord] === pieceColour) {\n      count++;\n    } else {\n      break;\n    }\n  }\n\n  rowIndex = pieceRowCoord;\n\n  for (rowIndex = pieceRowCoord; rowIndex < pieceRowCoord + 5 && rowIndex < 15; rowIndex++) {\n    if (board[rowIndex][pieceColCoord] === pieceColour) {\n      count++;\n    } else {\n      break;\n    }\n  } // console.log(count)\n\n\n  if (count >= 5) {\n    // console.log(pieceColour)\n    return pieceColour;\n  }\n\n  return null;\n}\n\nfunction topLeftToBotRightCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex = pieceRowCoord;\n  let colIndex = pieceColCoord;\n  count = -1;\n\n  while (rowInex > pieceRowCoord - 5 && rowInex >= 0 && colIndex > pieceColCoord - 5 && colIndex >= 0) {\n    if (board[rowInex][colIndex] === pieceColour) {\n      count++;\n    } else {\n      break;\n    }\n\n    rowInex--;\n    colIndex--;\n  }\n\n  rowInex = pieceRowCoord;\n  colIndex = pieceColCoord;\n\n  while (rowInex < pieceRowCoord + 5 && rowInex < 15 && colIndex < pieceColCoord + 5 && colIndex < 15) {\n    if (board[rowInex][colIndex] === pieceColour) {\n      count++;\n    } else {\n      break;\n    } // console.log([rowInex,colIndex])\n    // console.log(board[rowInex][colIndex])\n\n\n    rowInex++;\n    colIndex++;\n  } // console.log(count)\n\n\n  if (count >= 5) {\n    // console.log(pieceColour)\n    return pieceColour;\n  }\n\n  return null;\n}\n\nfunction checkWinning(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let whoWin = null;\n  let topBot = topToBotCheck(pieceColour, pieceRowCoord, pieceColCoord, board); // console.log(topBot!==null)\n\n  let leftBottoRightTop = leftBottoRightTopCheck(pieceColour, pieceRowCoord, pieceColCoord, board); // console.log(leftBottoRightTop!==null)\n\n  let leftright = leftToRightCheck(pieceColour, pieceRowCoord, pieceColCoord, board); // console.log(leftright!==null)\n\n  let topLeftToBotRight = topLeftToBotRightCheck(pieceColour, pieceRowCoord, pieceColCoord, board); // console.log(topLeftToBotRight!==null)\n\n  if (checkDraw(board) === true) {\n    whoWin = \"D\";\n  } //if after draw no one wins then it is a draw\n\n\n  if (topBot !== null) {\n    whoWin = topBot;\n  } else if (leftBottoRightTop !== null) {\n    whoWin = leftBottoRightTop;\n  } else if (leftright !== null) {\n    whoWin = leftright;\n  } else if (topLeftToBotRight !== null) {\n    whoWin = topLeftToBotRight;\n  }\n\n  if (whoWin !== null) {\n    console.log(\"found\");\n  }\n\n  return whoWin;\n}\n\nexport { putDownPiece, checkWinning, avalibleMoves, checkDraw };","map":{"version":3,"names":["putDownPiece","coord","whoTurn","board","rowCoord","colCoord","avalibleMoves","row","col","length","push","checkDraw","possibleMoves","leftToRightCheck","pieceColour","pieceRowCoord","pieceColCoord","count","colIndex","leftBottoRightTopCheck","rowInex","topToBotCheck","rowIndex","topLeftToBotRightCheck","checkWinning","whoWin","topBot","leftBottoRightTop","leftright","topLeftToBotRight","console","log"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/GameLogic.jsx"],"sourcesContent":["//jshint esversion:6\r\n\r\n\r\n/*change the board arrangement by modifying the two diementional arrays\r\nif it is a legal move such that the piece is placed in an unoccupied intersection,\r\noutput true\r\n*/\r\nfunction putDownPiece(coord,whoTurn,board){\r\n    var rowCoord=coord[0];\r\n    var colCoord=coord[1];\r\n    if (board[rowCoord][colCoord] ===\" \"){\r\n        board[rowCoord][colCoord]=whoTurn;\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction avalibleMoves(board){\r\n    let avalibleMoves=[];\r\n    let row,col;\r\n    for (row=0;row<board.length;row++){\r\n        for (col=0;col<board[row].length;col++){\r\n        if (board[row][col]===\" \"){\r\n            avalibleMoves.push([row,col])\r\n        }\r\n        }\r\n    }\r\n    return avalibleMoves;\r\n}\r\n\r\nfunction checkDraw(board){\r\n    let possibleMoves=avalibleMoves(board);\r\n    if(possibleMoves.length===0){\r\n        return true;\r\n    } else{\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction leftToRightCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let colIndex;\r\n\r\n        count=-1\r\n        //since it will count itself twice and it will outside of range if we set \r\n        //colIndex=pieceColCoord-1 for pieceColCoord=0\r\n        colIndex=pieceColCoord;\r\n        for(colIndex=pieceColCoord;colIndex<pieceColCoord+5 && colIndex<15;colIndex++){\r\n            if (board[pieceRowCoord][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        colIndex=pieceColCoord;\r\n        for(colIndex=pieceColCoord;colIndex>pieceColCoord-5 && colIndex>=0;colIndex--){\r\n            if (board[pieceRowCoord][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }   \r\n    }\r\n        // console.log(count)\r\n        if (count>=5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    \r\n    return null;\r\n}\r\n\r\n\r\n\r\nfunction leftBottoRightTopCheck (pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex=pieceRowCoord;\r\n    let colIndex=pieceColCoord;\r\n\r\n        count=-1\r\n        while(rowInex>pieceRowCoord-5 && rowInex>=0 && colIndex<pieceColCoord+5 && colIndex<15){\r\n        if (board[rowInex][colIndex]===pieceColour){\r\n            count++;       \r\n            // console.log(count)        \r\n        } else {\r\n            break;\r\n        }\r\n        rowInex--;\r\n        colIndex++;\r\n    }\r\n    rowInex=pieceRowCoord;\r\n    colIndex=pieceColCoord\r\n    while(colIndex>pieceColCoord-5 && colIndex>=0 && rowInex<pieceRowCoord+5 && rowInex<15){\r\n        if (board[rowInex][colIndex]===pieceColour){\r\n            count++;        \r\n            // console.log(count)       \r\n        } else {\r\n            break;\r\n        }\r\n        colIndex--\r\n        rowInex++\r\n    }\r\n\r\n\r\n\r\n        // console.log(count)\r\n        if (count>=5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    \r\n    return null;\r\n}\r\n\r\nfunction topToBotCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowIndex=pieceRowCoord;\r\n\r\n        count=-1\r\n        for(rowIndex=pieceRowCoord;rowIndex>pieceRowCoord-5 && rowIndex>=0;rowIndex--){\r\n            if (board[rowIndex][pieceColCoord]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        rowIndex=pieceRowCoord\r\n        for(rowIndex=pieceRowCoord;rowIndex<pieceRowCoord+5 && rowIndex<15;rowIndex++){\r\n            if (board[rowIndex][pieceColCoord]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(count)\r\n        if (count>=5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    \r\n    return null;\r\n}\r\n\r\n\r\nfunction topLeftToBotRightCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex=pieceRowCoord;\r\n    let colIndex=pieceColCoord;\r\n\r\n        count=-1\r\n        while (rowInex>pieceRowCoord-5 && rowInex>=0 && colIndex>pieceColCoord-5 && colIndex>=0){\r\n            if (board[rowInex][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n            rowInex-- \r\n            colIndex--\r\n        }\r\n        rowInex=pieceRowCoord;\r\n        colIndex=pieceColCoord;\r\n        while(rowInex<pieceRowCoord+5 && rowInex<15 && colIndex<pieceColCoord+5 && colIndex<15){\r\n            if (board[rowInex][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n            // console.log([rowInex,colIndex])\r\n            // console.log(board[rowInex][colIndex])\r\n            rowInex++\r\n            colIndex++\r\n        }\r\n        // console.log(count)\r\n        if (count>=5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    \r\n    return null;\r\n}\r\n\r\n\r\n\r\nfunction checkWinning(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let whoWin=null;\r\n    let topBot=topToBotCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    // console.log(topBot!==null)\r\n    let leftBottoRightTop=leftBottoRightTopCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    // console.log(leftBottoRightTop!==null)\r\n    let leftright=leftToRightCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    // console.log(leftright!==null)\r\n    let topLeftToBotRight=topLeftToBotRightCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    // console.log(topLeftToBotRight!==null)\r\n    if (checkDraw(board)===true){\r\n        whoWin=\"D\"\r\n    }\r\n//if after draw no one wins then it is a draw\r\n    if (topBot!==null){\r\n        whoWin=topBot;\r\n    } else if(leftBottoRightTop !==null){\r\n        whoWin=leftBottoRightTop;\r\n    } else if(leftright !==null){\r\n        whoWin=leftright;\r\n    } else if(topLeftToBotRight !==null){\r\n        whoWin=topLeftToBotRight;\r\n    } \r\n    if(whoWin!==null){\r\n        console.log(\"found\")\r\n    }\r\n    return whoWin;\r\n            }\r\n\r\n\r\n\r\nexport { putDownPiece,checkWinning, avalibleMoves,checkDraw};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}