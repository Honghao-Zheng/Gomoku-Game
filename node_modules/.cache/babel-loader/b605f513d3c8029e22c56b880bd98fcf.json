{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\hxz157\\\\gomoku\\\\src\\\\components\\\\gameplaypage\\\\PlayerVsComputer.jsx\",\n    _s = $RefreshSig$();\n\nimport Board from \"../Board\";\nimport { NavButton, FunctionButton } from \"../Buttons\";\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\";\nimport { putDownPiece, checkWinning, avalibleMoves } from \"../GameLogic\";\nimport { useState } from \"react\";\nimport ShowText from \"../ShowText\";\nimport GAmove from \"../AIplayers/GA/GAalgorithm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardArrangementn\nfunction PlayerVsComputer(props) {\n  _s();\n\n  let whoPlaysFirst = props.settings.whoGoFirst;\n  let AIalgorithm = props.settings.computer;\n  const [turnState, setTurn] = useState({\n    isBlackTurn: true\n  });\n  const [gameState, setGame] = useState({\n    isStarted: false,\n    isEnded: false,\n    winner: null\n  });\n  const [moveState, setMove] = useState({\n    moveMade: []\n  });\n  const [depth, setDepth] = useState({\n    num: 5\n  });\n\n  function AImakeMove(AI, turn, board) {\n    let computerMove;\n\n    if (AI === \"Random\") {\n      computerMove = chooseRandomMove(board);\n    } else if (AI === \"Minimax\") {} else if (AI === \"Genetic\") {\n      computerMove = GAmove(GAdepth.num, turn, board);\n    }\n\n    putDownPiece(computerMove, turn, board);\n    return computerMove;\n  }\n\n  function handleMoveClick(clickedIntersectionCoord) {\n    let turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let isMoveMade;\n    let whoWin;\n    let avaMoves;\n    let numMoveLeft;\n    isMoveMade = putDownPiece(clickedIntersectionCoord, turn, boardArrangement);\n\n    if (isMoveMade) {\n      whoWin = checkWinning(turn, clickedIntersectionCoord, boardArrangement);\n      avaMoves = avalibleMoves(boardArrangement);\n      numMoveLeft = avaMoves.length;\n\n      if (whoWin !== null) {\n        setGame({\n          isStarted: gameState.isStarted,\n          isEnded: true,\n          winner: whoWin\n        });\n      } else if (numMoveLeft === 0) {\n        setGame({\n          isEnded: true,\n          winner: \"D\"\n        });\n      }\n\n      ; // console.log(moveState.moveMade)\n      // setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\n\n      if (turn === \"B\") {\n        turn = \"W\";\n      } else {\n        turn = \"B\";\n      }\n\n      if (numMoveLeft <= depth.num) {\n        setDepth({\n          num: numMoveLeft\n        });\n      }\n\n      let moveMade = AImakeMove(AIalgorithm, turn, boardArrangement);\n      whoWin = checkWinning(turn, moveMade, boardArrangement);\n\n      if (whoWin !== null) {\n        setGame({\n          isStarted: gameState.isStarted,\n          isEnded: true,\n          winner: whoWin\n        });\n      }\n\n      ;\n      setMove({\n        moveMade: moveMade\n      });\n    }\n  }\n\n  function getWinningDeclaration(whowin) {\n    if (whowin === \"B\") {\n      return \"Black piece win !\";\n    } else if (whowin === \"W\") {\n      return \"White piece win !\";\n    } else if (whowin === \"D\") {\n      return \"Game Draw\";\n    }\n  }\n\n  function resetBoard(board) {\n    let rowIndex, colIndex;\n\n    for (rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      for (colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\n        if (board[rowIndex][colIndex] !== \" \") {\n          board[rowIndex][colIndex] = \" \";\n        }\n      }\n    }\n  }\n\n  function resetGame(board) {\n    resetBoard(board);\n    setTurn({\n      isBlackTurn: true\n    });\n    setGame({\n      isStarted: false,\n      isEnded: false,\n      winner: null\n    });\n    setMove({\n      moveMade: []\n    });\n  }\n\n  function returnHome(board) {\n    props.onClickHome();\n    resetGame(board);\n  }\n\n  function startGame(whoPlaysFirst) {\n    if (whoPlaysFirst !== \"Player 1\") {\n      let moveMade = AImakeMove(AIalgorithm, \"B\", boardArrangement); // console.log(moveMade)\n\n      setMove({\n        moveMade: moveMade\n      });\n      setTurn({\n        isBlackTurn: turnState.isBlackTurn ? false : true\n      });\n    }\n\n    setGame({\n      isStarted: true,\n      isEnded: false,\n      winner: null\n    });\n  }\n\n  function isGamePlayEnabled() {\n    if (!gameState.isEnded && gameState.isStarted) {\n      return true;\n    } else {\n      return false;\n    }\n  } // console.log(gameState.isEnded)\n  // console.log(gameState.winner)\n  // console.log(boardArrangement1vs1)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(NavButton, {\n        text: \"Home\",\n        onClick: () => {\n          returnHome(boardArrangement);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Human VS Computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          boardArrangement: boardArrangement,\n          onClick: isGamePlayEnabled() ? _ref => {\n            let [rowNum, colNum] = _ref;\n            return handleMoveClick([rowNum, colNum]);\n          } : null,\n          moveMade: moveState.moveMade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"des\",\n        children: [gameState.isStarted ? /*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"reset\",\n          onClick: () => resetGame(boardArrangement)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"start\",\n          onClick: () => {\n            startGame(whoPlaysFirst);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), gameState.isEnded ? /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textRed\",\n          condition: gameState.isEnded,\n          textIfTrue: getWinningDeclaration(gameState.winner),\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: turnState.isBlackTurn,\n          textIfTrue: \"Turn: Black\",\n          textIfFalse: \"Turn: White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: whoPlaysFirst === \"Player 1\",\n          textIfTrue: \"Black Piece: Player 1(Human)\",\n          textIfFalse: \"Black Piece: Player 2(\" + AIalgorithm + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: whoPlaysFirst !== \"Player 1\",\n          textIfTrue: \"White Piece: Player 1(Human)\",\n          textIfFalse: \"White Piece: Player 2(\" + AIalgorithm + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerVsComputer, \"j2cr5FEk8p0ZzpQ4i6w9V2vYo8M=\");\n\n_c = PlayerVsComputer;\nexport default PlayerVsComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerVsComputer\");","map":{"version":3,"names":["Board","NavButton","FunctionButton","chooseRandomMove","putDownPiece","checkWinning","avalibleMoves","useState","ShowText","GAmove","boardArrangement","PlayerVsComputer","props","whoPlaysFirst","settings","whoGoFirst","AIalgorithm","computer","turnState","setTurn","isBlackTurn","gameState","setGame","isStarted","isEnded","winner","moveState","setMove","moveMade","depth","setDepth","num","AImakeMove","AI","turn","board","computerMove","GAdepth","handleMoveClick","clickedIntersectionCoord","isMoveMade","whoWin","avaMoves","numMoveLeft","length","getWinningDeclaration","whowin","resetBoard","rowIndex","colIndex","resetGame","returnHome","onClickHome","startGame","isGamePlayEnabled","rowNum","colNum"],"sources":["C:/Users/Jason/Desktop/hxz157/gomoku/src/components/gameplaypage/PlayerVsComputer.jsx"],"sourcesContent":["\r\n\r\nimport Board from \"../Board\";\r\nimport {NavButton,FunctionButton} from \"../Buttons\";\r\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\"\r\nimport { putDownPiece, checkWinning,avalibleMoves } from \"../GameLogic\"\r\nimport { useState } from \"react\";\r\nimport ShowText from \"../ShowText\";\r\nimport GAmove from \"../AIplayers/GA/GAalgorithm\"\r\n\r\nlet boardArrangement=[\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n  ];\r\n\r\nfunction PlayerVsComputer(props){\r\n    let whoPlaysFirst=props.settings.whoGoFirst;\r\n    let AIalgorithm=props.settings.computer;    \r\n\r\n    const [turnState,setTurn]=useState({\r\n    isBlackTurn:true\r\n  });\r\n      const [gameState,setGame]=useState({\r\n        isStarted:false,\r\n        isEnded:false,\r\n        winner:null\r\n      })\r\n      const [moveState,setMove]=useState({\r\n        moveMade:[]\r\n      })\r\n      const [depth,setDepth]=useState({\r\n        num:5\r\n      })\r\n\r\n\r\n\r\n    function AImakeMove(AI,turn,board){\r\n        let computerMove;\r\n        if(AI===\"Random\"){\r\n            computerMove=chooseRandomMove(board)\r\n        } else if(AI===\"Minimax\") {\r\n        } else if(AI===\"Genetic\"){\r\n            computerMove=GAmove(GAdepth.num,turn,board)\r\n        }\r\n        putDownPiece(computerMove,turn,board)\r\n        return computerMove\r\n    } \r\n    function handleMoveClick(clickedIntersectionCoord){\r\n      \r\n      let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n      let isMoveMade;\r\n      let whoWin;\r\n    let avaMoves;\r\n    let numMoveLeft;\r\n      isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement);\r\n      if (isMoveMade){\r\n        whoWin =checkWinning(turn,clickedIntersectionCoord,boardArrangement);\r\n        avaMoves=avalibleMoves(boardArrangement);\r\n        numMoveLeft=avaMoves.length;\r\n        if (whoWin!==null){\r\n          setGame({\r\n            isStarted:gameState.isStarted,\r\n            isEnded:true,\r\n            winner:whoWin\r\n          })\r\n        }else if(numMoveLeft===0){\r\n            setGame({\r\n              isEnded:true,\r\n              winner:\"D\"\r\n            })\r\n          };\r\n        // console.log(moveState.moveMade)\r\n        // setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\r\n        if(turn===\"B\"){\r\n            turn=\"W\"\r\n        }else{\r\n            turn=\"B\"\r\n        }\r\n        if(numMoveLeft<=depth.num){\r\n            setDepth({\r\n                num:numMoveLeft\r\n            })\r\n        }\r\n      let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement)\r\n      whoWin =checkWinning(turn,moveMade,boardArrangement);\r\n      if (whoWin!==null){\r\n        setGame({\r\n            isStarted:gameState.isStarted,\r\n          isEnded:true,\r\n          winner:whoWin\r\n        })\r\n      }; \r\n      setMove({moveMade:moveMade})\r\n      } \r\n    }\r\n\r\n    function getWinningDeclaration(whowin){\r\n        if (whowin===\"B\"){\r\n            return (\"Black piece win !\")\r\n        } else if(whowin===\"W\" ){\r\n            return (\"White piece win !\")\r\n        } else if (whowin===\"D\" ){\r\n            return (\"Game Draw\")\r\n        }\r\n    }\r\n\r\n    function resetBoard(board){\r\n        let rowIndex,colIndex;\r\n        for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n          for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n            if(board[rowIndex][colIndex]!==\" \"){\r\n                board[rowIndex][colIndex]=\" \"\r\n            }\r\n          }\r\n                   \r\n        }\r\n    }\r\n\r\n    function resetGame(board){\r\n        resetBoard(board)\r\n        setTurn({isBlackTurn:true})\r\n        setGame({isStarted:false, isEnded:false, winner:null})\r\n        setMove({moveMade:[]})\r\n    }\r\n\r\n    function returnHome(board){\r\n      props.onClickHome();\r\n      resetGame(board)\r\n    }\r\n\r\n    function startGame(whoPlaysFirst){\r\n        if(whoPlaysFirst!==\"Player 1\"){          \r\n            let moveMade=AImakeMove(AIalgorithm,\"B\",boardArrangement)\r\n            // console.log(moveMade)\r\n            setMove({moveMade:moveMade});\r\n            setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \r\n\r\n        }\r\n        setGame({\r\n            isStarted:true,isEnded:false,winner:null\r\n        })\r\n    }\r\n\r\n    function isGamePlayEnabled(){\r\n        if(!gameState.isEnded && gameState.isStarted){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    // console.log(gameState.isEnded)\r\n    // console.log(gameState.winner)\r\n    // console.log(boardArrangement1vs1)\r\n    return(\r\n        <div>\r\n        <div className=\"rows\">\r\n        <NavButton text=\"Home\" onClick={()=>{\r\n                returnHome(boardArrangement)\r\n            }}/>\r\n\r\n            <h1>Human VS Computer</h1>\r\n        </div>\r\n        \r\n\r\n        <div className=\"gameScreen\">\r\n\r\n                <div className=\"gameboard\">        \r\n                    <Board\r\n                        boardArrangement={boardArrangement}\r\n                        onClick={isGamePlayEnabled()?\r\n                            ([rowNum,colNum])=>handleMoveClick([rowNum,colNum]):\r\n                                    null}\r\n                        moveMade={moveState.moveMade}\r\n                        />\r\n                </div>\r\n                <div className=\"des\">\r\n                \r\n                    {gameState.isStarted?\r\n                    <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement)}/>:\r\n                    <FunctionButton text=\"start\" onClick={()=>{\r\n                        startGame(whoPlaysFirst)\r\n                    }} />\r\n                    }\r\n                    {\r\n                    gameState.isEnded?\r\n                    <ShowText textColour=\"textRed\"\r\n                        condition={gameState.isEnded}\r\n                        textIfTrue={getWinningDeclaration(gameState.winner)}\r\n                        textIfFalse=\"\"\r\n                     />:\r\n                   <ShowText textColour=\"textBlack\"\r\n                        condition={turnState.isBlackTurn}\r\n                        textIfTrue=\"Turn: Black\"\r\n                        textIfFalse=\"Turn: White\"\r\n                    />\r\n                    }\r\n                    <ShowText textColour=\"textBlack\"\r\n                        condition={whoPlaysFirst===\"Player 1\"}\r\n                        textIfTrue=\"Black Piece: Player 1(Human)\"\r\n                        textIfFalse={\"Black Piece: Player 2(\"+AIalgorithm+\")\"}\r\n                    />\r\n                       <ShowText textColour=\"textBlack\"\r\n                        condition={whoPlaysFirst!==\"Player 1\"}\r\n                        textIfTrue=\"White Piece: Player 1(Human)\"\r\n                        textIfFalse={\"White Piece: Player 2(\"+AIalgorithm+\")\"}\r\n                    />                  \r\n                </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerVsComputer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}