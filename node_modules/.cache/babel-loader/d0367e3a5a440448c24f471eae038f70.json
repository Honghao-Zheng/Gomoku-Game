{"ast":null,"code":"//jshint esversion:6\n\n/*change the board arrangement by modifying the two diementional arrays\r\nif it is a legal move such that the piece is placed in an unoccupied intersection,\r\noutput true\r\n*/\nfunction putDownPiece(coord, whoTurn, board) {\n  var rowCoord = coord[0];\n  var colCoord = coord[1];\n\n  if (board[rowCoord][colCoord] === \" \") {\n    board[rowCoord][colCoord] = whoTurn;\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction rightDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let colInex;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    for (colInex = pieceColCoord; colInex < pieceColCoord + 5 && colInex < 15; colInex++) {\n      if (board[pieceRowCoord][colInex] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction rightTopDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex = pieceRowCoord;\n  let colInex = pieceColCoord;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    while (rowInex > pieceRowCoord - 5 && rowInex >= 0 && colInex < pieceColCoord + 5 && colInex < 15) {\n      if (board[rowInex][colInex] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n\n      rowInex--;\n      colInex++;\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction topDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    for (rowInex = pieceRowCoord; rowInex > pieceRowCoord - 5 && rowInex >= 0; rowInex--) {\n      if (board[rowInex][pieceColCoord] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction topLeftDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex = pieceRowCoord;\n  let colIndex = pieceColCoord;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    while (rowInex > pieceRowCoord - 5 && rowInex >= 0 && colIndex > pieceColCoord - 5 && colIndex >= 0) {\n      if (board[rowInex][colIndex] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n\n      rowInex--;\n      colIndex--;\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction leftDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let colIndex;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    for (colIndex = pieceColCoord; colIndex > pieceColCoord - 5 && colIndex >= 0; colIndex--) {\n      if (board[pieceRowCoord][colIndex] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction leftBotDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex = pieceRowCoord;\n  let colIndex = pieceColCoord;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    while (colIndex > pieceColCoord - 5 && colIndex >= 0 && rowInex < pieceRowCoord + 5 && rowInex < 15) {\n      if (board[rowInex][colIndex] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n\n      colIndex--;\n      rowInex++;\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction botDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count;\n  let rowInex;\n\n  if (pieceColour !== \" \") {\n    count = 0;\n\n    for (rowInex = pieceRowCoord; rowInex < pieceRowCoord + 5 && rowInex < 15; rowInex++) {\n      if (board[rowInex][pieceColCoord] === pieceColour) {\n        count++;\n      } else {\n        break;\n      }\n    } // console.log(count)\n\n\n    if (count === 5) {\n      // console.log(pieceColour)\n      return pieceColour;\n    }\n  }\n\n  return null;\n}\n\nfunction botRightDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let count = 0;\n  let rowInex = pieceRowCoord;\n  let colIndex = pieceColCoord;\n\n  while (rowInex < pieceRowCoord + 5 && rowInex < 15 && colIndex < pieceColCoord + 5 && colIndex < 15) {\n    if (board[rowInex][colIndex] === pieceColour) {\n      count++;\n    } else {\n      break;\n    } // console.log([rowInex,colIndex])\n    // console.log(board[rowInex][colIndex])\n\n\n    rowInex++;\n    colIndex++;\n  } // console.log(count)\n\n\n  if (count === 5) {\n    // console.log(pieceColour)\n    return pieceColour;\n  }\n\n  return null;\n}\n\nfunction checkWinning(pieceColour, pieceRowCoord, pieceColCoord, board) {\n  let whoWin = null;\n  let top = topDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let topLeft = topLeftDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let left = leftDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let leftBot = leftBotDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let bot = botDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let botRight = botRightDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let right = rightDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n  let rightTop = rightTopDirectionCheck(pieceColour, pieceRowCoord, pieceColCoord, board);\n\n  if (top !== null) {\n    whoWin = top;\n  } else if (topLeft !== null) {\n    whoWin = topLeft;\n  } else if (left !== null) {\n    whoWin = left;\n  } else if (leftBot !== null) {\n    whoWin = leftBot;\n  } else if (bot !== null) {\n    whoWin = bot;\n  } else if (botRight !== null) {\n    whoWin = botRight;\n  } else if (right !== null) {\n    whoWin = right;\n  } else if (rightTop !== null) {\n    whoWin = rightTop;\n  }\n\n  return whoWin;\n} //     }\n// }\n\n\nexport { putDownPiece, checkWinning };","map":{"version":3,"names":["putDownPiece","coord","whoTurn","board","rowCoord","colCoord","rightDirectionCheck","pieceColour","pieceRowCoord","pieceColCoord","count","colInex","rightTopDirectionCheck","rowInex","topDirectionCheck","topLeftDirectionCheck","colIndex","leftDirectionCheck","leftBotDirectionCheck","botDirectionCheck","botRightDirectionCheck","checkWinning","whoWin","top","topLeft","left","leftBot","bot","botRight","right","rightTop"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/GameLogic.jsx"],"sourcesContent":["//jshint esversion:6\r\n\r\n\r\n/*change the board arrangement by modifying the two diementional arrays\r\nif it is a legal move such that the piece is placed in an unoccupied intersection,\r\noutput true\r\n*/\r\nfunction putDownPiece(coord,whoTurn,board){\r\n    var rowCoord=coord[0];\r\n    var colCoord=coord[1];\r\n    if (board[rowCoord][colCoord] ===\" \"){\r\n        board[rowCoord][colCoord]=whoTurn;\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n    \r\n}\r\n\r\nfunction rightDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let colInex;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        for(colInex=pieceColCoord;colInex<pieceColCoord+5 && colInex<15;colInex++){\r\n            if (board[pieceRowCoord][colInex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction rightTopDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex=pieceRowCoord;\r\n    let colInex=pieceColCoord;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        while(rowInex>pieceRowCoord-5 && rowInex>=0 && colInex<pieceColCoord+5 && colInex<15){\r\n\r\n        if (board[rowInex][colInex]===pieceColour){\r\n            count++;               \r\n        } else {\r\n            break;\r\n        }\r\n        rowInex--;\r\n        colInex++;\r\n    }\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction topDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        for(rowInex=pieceRowCoord;rowInex>pieceRowCoord-5 && rowInex>=0;rowInex--){\r\n            if (board[rowInex][pieceColCoord]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nfunction topLeftDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex=pieceRowCoord;\r\n    let colIndex=pieceColCoord;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        while (rowInex>pieceRowCoord-5 && rowInex>=0 && colIndex>pieceColCoord-5 && colIndex>=0){\r\n            if (board[rowInex][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n            rowInex--\r\n            colIndex--\r\n        }\r\n\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction leftDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let colIndex;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        for(colIndex=pieceColCoord;colIndex>pieceColCoord-5 && colIndex>=0;colIndex--){\r\n            if (board[pieceRowCoord][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction leftBotDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex=pieceRowCoord;\r\n    let colIndex=pieceColCoord;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        while(colIndex>pieceColCoord-5 && colIndex>=0 && rowInex<pieceRowCoord+5 && rowInex<15){\r\n            if (board[rowInex][colIndex]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n            colIndex--\r\n            rowInex++\r\n        }\r\n\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction botDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count;\r\n    let rowInex;\r\n    if (pieceColour !==\" \"){\r\n        count=0\r\n        for(rowInex=pieceRowCoord;rowInex<pieceRowCoord+5 && rowInex<15;rowInex++){\r\n            if (board[rowInex][pieceColCoord]===pieceColour){\r\n                count++;               \r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // console.log(count)\r\n        if (count===5){\r\n            // console.log(pieceColour)\r\n            return pieceColour;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction botRightDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let count=0;\r\n    let rowInex=pieceRowCoord;\r\n    let colIndex=pieceColCoord;\r\n    while(rowInex<pieceRowCoord+5 && rowInex<15 && colIndex<pieceColCoord+5 && colIndex<15){\r\n        if (board[rowInex][colIndex]===pieceColour){\r\n            count++;               \r\n        } else {\r\n            break;\r\n        }\r\n        // console.log([rowInex,colIndex])\r\n        // console.log(board[rowInex][colIndex])\r\n        rowInex++\r\n        colIndex++\r\n    }\r\n    // console.log(count)\r\n    if (count===5){\r\n        // console.log(pieceColour)\r\n        return pieceColour;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction checkWinning(pieceColour,pieceRowCoord,pieceColCoord,board){\r\n    let whoWin=null;\r\n    let top=topDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let topLeft=topLeftDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let left=leftDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let leftBot=leftBotDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let bot=botDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let botRight=botRightDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let right=rightDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n    let rightTop=rightTopDirectionCheck(pieceColour,pieceRowCoord,pieceColCoord,board);\r\n\r\n    if (top!==null){\r\n        whoWin=top;\r\n    } else if(topLeft !==null){\r\n        whoWin=topLeft;\r\n    } else if(left !==null){\r\n        whoWin=left;\r\n    } else if(leftBot !==null){\r\n        whoWin=leftBot;\r\n    } else if(bot !==null){\r\n        whoWin=bot;\r\n    } else if(botRight !==null){\r\n        whoWin=botRight;\r\n    } else if(right !==null){\r\n        whoWin=right;\r\n    } else if (rightTop !==null){\r\n        whoWin=rightTop;\r\n    }\r\n    return whoWin;\r\n            }\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\nexport { putDownPiece,checkWinning};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}