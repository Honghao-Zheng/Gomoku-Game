{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\hxz157\\\\gomoku\\\\src\\\\components\\\\gameplaypage\\\\PlayerVsPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport Board from \"../Board\";\nimport { NavButton, FunctionButton } from \"../Buttons\";\nimport { putDownPiece, checkWinning, avalibleMoves } from \"../GameLogic\";\nimport { useState } from \"react\";\nimport ShowText from \"../ShowText\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardArrangementn\nfunction PlayerVsPlayer(props) {\n  _s();\n\n  const [turnState, setTurn] = useState({\n    isBlackTurn: true\n  });\n  const [gameState, setGame] = useState({\n    isEnded: false,\n    winner: null\n  });\n  const [moveState, setMove] = useState({\n    moveMade: []\n  });\n\n  function handleMoveClick(clickedIntersectionCoord) {\n    let turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let isMoveMade;\n    let winner;\n    let isDraw;\n    let avaMoves;\n    let numMoveLeft;\n    isMoveMade = putDownPiece(clickedIntersectionCoord, turn, boardArrangement);\n\n    if (isMoveMade) {\n      winner = checkWinning(turn, clickedIntersectionCoord, boardArrangement);\n\n      if (winner !== null) {\n        setGame({\n          isEnded: true,\n          winner: winner\n        });\n      }\n\n      ;\n      avaMoves = avalibleMoves(boardArrangement);\n      numMoveLeft = avaMoves.length;\n\n      if (numMoveLeft === 0) {\n        setGame({\n          isEnded: true,\n          winner: \"D\"\n        });\n      } // console.log(moveState.moveMade)\n\n\n      setMove({\n        moveMade: clickedIntersectionCoord\n      });\n      setTurn({\n        isBlackTurn: turnState.isBlackTurn ? false : true\n      });\n    }\n  }\n\n  function getWinningDeclaration(whowin) {\n    if (whowin === \"B\") {\n      return \"Black piece win !\";\n    } else if (whowin === \"W\") {\n      return \"White piece win !\";\n    } else if (whowin === \"D\") {\n      return \"Game Draw\";\n    }\n  }\n\n  function resetBoard(board) {\n    let rowIndex, colIndex;\n\n    for (rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      for (colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\n        if (board[rowIndex][colIndex] !== \" \") {\n          board[rowIndex][colIndex] = \" \";\n        }\n      }\n    }\n  }\n\n  function resetGame(board) {\n    resetBoard(board);\n    setTurn({\n      isBlackTurn: true\n    });\n    setGame({\n      isEnded: false,\n      winner: null\n    });\n    setMove({\n      moveMade: []\n    });\n  }\n\n  function returnHome(board) {\n    props.onClickHome();\n    resetGame(board);\n  } // console.log(gameState.isEnded)\n  // console.log(gameState.winner)\n  // console.log(boardArrangement1vs1)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(NavButton, {\n        text: \"Home\",\n        onClick: () => {\n          returnHome(boardArrangement);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Player 1 VS Player 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          boardArrangement: boardArrangement,\n          onClick: gameState.isEnded ? null : _ref => {\n            let [rowNum, colNum] = _ref;\n            return handleMoveClick([rowNum, colNum]);\n          },\n          moveMade: moveState.moveMade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"des\",\n        children: [/*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"reset\",\n          onClick: () => resetGame(boardArrangement)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), gameState.isEnded ? /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textRed\",\n          condition: gameState.isEnded,\n          textIfTrue: getWinningDeclaration(gameState.winner),\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: turnState.isBlackTurn,\n          textIfTrue: \"Turn: Black\",\n          textIfFalse: \"Turn: White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"Black Piece: Player 1\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"white Piece: Player 2\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerVsPlayer, \"vyxZbMHQek0J23KZEW24OM9Umm8=\");\n\n_c = PlayerVsPlayer;\nexport default PlayerVsPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerVsPlayer\");","map":{"version":3,"names":["Board","NavButton","FunctionButton","putDownPiece","checkWinning","avalibleMoves","useState","ShowText","boardArrangement","PlayerVsPlayer","props","turnState","setTurn","isBlackTurn","gameState","setGame","isEnded","winner","moveState","setMove","moveMade","handleMoveClick","clickedIntersectionCoord","turn","isMoveMade","isDraw","avaMoves","numMoveLeft","length","getWinningDeclaration","whowin","resetBoard","board","rowIndex","colIndex","resetGame","returnHome","onClickHome","rowNum","colNum"],"sources":["C:/Users/Jason/Desktop/hxz157/gomoku/src/components/gameplaypage/PlayerVsPlayer.jsx"],"sourcesContent":["import Board from \"../Board\";\r\nimport {NavButton,FunctionButton} from \"../Buttons\";\r\n\r\nimport { putDownPiece, checkWinning,avalibleMoves } from \"../GameLogic\"\r\nimport { useState } from \"react\";\r\nimport ShowText from \"../ShowText\";\r\n\r\nlet boardArrangement=[\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n  ];\r\n\r\nfunction PlayerVsPlayer(props){\r\n    \r\n\r\n    const [turnState,setTurn]=useState({\r\n    isBlackTurn:true\r\n  });\r\n      const [gameState,setGame]=useState({\r\n        isEnded:false,\r\n        winner:null\r\n      })\r\n      const [moveState,setMove]=useState({\r\n        moveMade:[]\r\n      })\r\n    function handleMoveClick(clickedIntersectionCoord){\r\n      \r\n      let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n      let isMoveMade;\r\n      let winner;\r\n      let isDraw;\r\n      let avaMoves;\r\n      let numMoveLeft;\r\n\r\n      isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement);\r\n      if (isMoveMade){\r\n        winner =checkWinning(turn,clickedIntersectionCoord,boardArrangement);\r\n        if (winner!==null){\r\n          setGame({\r\n            isEnded:true,\r\n            winner:winner\r\n          })\r\n        }; \r\n        avaMoves=avalibleMoves(boardArrangement);\r\n        numMoveLeft=avaMoves.length;\r\n        if(numMoveLeft===0){\r\n          setGame({\r\n            isEnded:true,\r\n            winner:\"D\"\r\n          })\r\n        }\r\n        \r\n        // console.log(moveState.moveMade)\r\n        setMove({moveMade:clickedIntersectionCoord})\r\n        setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\r\n      } \r\n    }\r\n\r\n    function getWinningDeclaration(whowin){\r\n        if (whowin===\"B\"){\r\n            return (\"Black piece win !\")\r\n        } else if(whowin===\"W\" ){\r\n            return (\"White piece win !\")\r\n        } else if (whowin===\"D\" ){\r\n            return (\"Game Draw\")\r\n        }\r\n    }\r\n\r\n    function resetBoard(board){\r\n        let rowIndex,colIndex;\r\n        for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n          for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n            if(board[rowIndex][colIndex]!==\" \"){\r\n                board[rowIndex][colIndex]=\" \"\r\n            }\r\n          }\r\n                   \r\n        }\r\n    }\r\n\r\n    function resetGame(board){\r\n        resetBoard(board)\r\n        setTurn({isBlackTurn:true})\r\n        setGame({isEnded:false, winner:null})\r\n        setMove({moveMade:[]})\r\n    }\r\n\r\n    function returnHome(board){\r\n      props.onClickHome();\r\n      resetGame(board)\r\n    }\r\n\r\n\r\n    // console.log(gameState.isEnded)\r\n    // console.log(gameState.winner)\r\n    // console.log(boardArrangement1vs1)\r\n    return(\r\n        <div>\r\n        <div className=\"rows\">\r\n        <NavButton text=\"Home\" onClick={()=>{\r\n                returnHome(boardArrangement)\r\n            }}/>\r\n\r\n            <h1>Player 1 VS Player 2</h1>\r\n        </div>\r\n        \r\n\r\n        <div className=\"gameScreen\">\r\n\r\n                <div className=\"gameboard\">        \r\n                    <Board\r\n                        boardArrangement={boardArrangement}\r\n                        onClick={gameState.isEnded?\r\n                                    null:\r\n                                    ([rowNum,colNum])=>handleMoveClick([rowNum,colNum])}\r\n                        moveMade={moveState.moveMade}\r\n                        />\r\n                </div>\r\n                <div className=\"des\">\r\n                \r\n                    <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement)}/>\r\n                    {\r\n                    gameState.isEnded?\r\n                    <ShowText textColour=\"textRed\"\r\n                        condition={gameState.isEnded}\r\n                        textIfTrue={getWinningDeclaration(gameState.winner)}\r\n                        textIfFalse=\"\"\r\n                     />:\r\n                   <ShowText textColour=\"textBlack\"\r\n                        condition={turnState.isBlackTurn}\r\n                        textIfTrue=\"Turn: Black\"\r\n                        textIfFalse=\"Turn: White\"\r\n                    />\r\n                    }\r\n                    <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"Black Piece: Player 1\"\r\n                        textIfFalse=\"\"\r\n                    />\r\n                       <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"white Piece: Player 2\"\r\n                        textIfFalse=\"\"\r\n                    />                  \r\n                </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerVsPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}