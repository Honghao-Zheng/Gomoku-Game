{"ast":null,"code":"import { swapColor } from \"../../GameLogic.jsx\";\nimport { copyTwoDimArray } from \"../../GeneralAlgorithms.jsx\";\n\nfunction atkMoveEvaluation(move, pieceColor, board) {\n  let rowCoord = move[0];\n  let colCoord = move[1];\n  let score = 0;\n  let threeCount = 0;\n  let fourCount = 0;\n  let fourOneCount = 0;\n  let fiveCount = 0;\n  let vThreat = threatRecognise(verticalCheck(rowCoord, colCoord, pieceColor, board));\n  let hThreat = threatRecognise(horizontalCheck(rowCoord, colCoord, pieceColor, board));\n  let d1Threat = threatRecognise(leftBotToRightTopCheck(rowCoord, colCoord, pieceColor, board));\n  let d2Threat = threatRecognise(leftTopToRightBotCheck(rowCoord, colCoord, pieceColor, board));\n  let threats = [vThreat, hThreat, d1Threat, d2Threat];\n  threats.map((threat, index) => {\n    switch (threat) {\n      case 2:\n        score += 2;\n        break;\n\n      case 21:\n        score += 1;\n        break;\n\n      case 31:\n        score += 4;\n        break;\n      // two 3 in a row form a winning threat so high point, more than that no much point\n\n      case 3:\n        threeCount++;\n\n        if (threeCount === 2) {\n          score += 22;\n        } else if (threeCount >= 3) {\n          score += 1;\n        } else {\n          if (fourOneCount === 1) {\n            score += 14;\n          } else {\n            score += 8;\n          }\n        }\n\n        break;\n      //no much point for multiple 4 in a row\n\n      case 4:\n        fourCount++;\n\n        if (fourCount >= 2) {\n          score += 1;\n        } else {\n          score += 32;\n        }\n\n        break;\n\n      case 41:\n        fourOneCount++;\n\n        if (fourOneCount === 1) {\n          if (threeCount === 1) {\n            score += 22;\n          } else {\n            score += 16;\n          }\n        } else {\n          score += 1;\n        }\n\n        break;\n\n      default:\n        score += 0;\n    }\n\n    if (threat === 5) {\n      fiveCount++;\n\n      if (fiveCount === 1) {\n        score += 128;\n      } else {\n        score += 1;\n      }\n    }\n\n    return score;\n  });\n}\n\nfunction verticalCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts;\n\n  while (board[rowIndex][colIndex] !== \" \" && rowIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++;\n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    rowIndex--;\n  }\n\n  ;\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (board[rowIndex][colIndex] !== \" \" && rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++;\n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    rowIndex++;\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction horizontalCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts;\n\n  while (board[rowIndex][colIndex] !== \" \" && colIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++;\n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    colIndex--;\n  }\n\n  ;\n  rowIndex = rowCoord;\n  colIndex = colCoord;\n\n  while (board[rowIndex][colIndex] !== \" \" && colIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++;\n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    colIndex++;\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction leftBotToRightTopCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts; //to right top\n\n  while (board[rowIndex][colIndex] !== \" \" && rowIndex >= 0 && colIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++; // console.log(count)        \n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    rowIndex--;\n    colIndex++;\n  } //to left bot\n\n\n  while (board[rowIndex][colIndex] !== \" \" && colIndex >= 0 && rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++; // console.log(count)        \n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    colIndex--;\n    rowIndex++;\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction leftTopToRightBotCheck(rowCoord, colCoord, pieceColor, board) {\n  let sameColorCount = -1;\n  let oppositeColorCount = 0;\n  let rowIndex = rowCoord;\n  let colIndex = colCoord;\n  let occupant;\n  let counts; //to leftTop\n\n  while (board[rowIndex][colIndex] !== \" \" && rowIndex >= 0 && colIndex >= 0) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++; // console.log(count)        \n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    rowIndex--;\n    colIndex--;\n  }\n\n  while (board[rowIndex][colIndex] !== \" \" && colIndex < 15 && rowIndex < 15) {\n    occupant = board[rowIndex][colIndex];\n\n    if (occupant === pieceColor) {\n      sameColorCount++; // console.log(count)        \n    } else {\n      oppositeColorCount++;\n      break;\n    }\n\n    colIndex++;\n    rowIndex++;\n  }\n\n  counts = {\n    sameColor: sameColorCount,\n    oppositeColor: oppositeColorCount\n  };\n  return counts;\n}\n\nfunction threatRecognise(counts) {\n  let sameColorCount = counts.sameColor;\n  let oppositeColorCount = counts.oppositeColor;\n  let threat = null;\n\n  switch ([sameColorCount, oppositeColorCount]) {\n    case [2, 0]:\n      threat = 2;\n      break;\n\n    case [2, 1]:\n      threat = 21;\n      break;\n\n    case [3, 0]:\n      threat = 3;\n      break;\n\n    case [3, 1]:\n      threat = 31;\n      break;\n\n    case [4, 0]:\n      threat = 4;\n      break;\n\n    case [4, 1]:\n      threat = 41;\n      break;\n\n    default:\n      threat = null;\n  }\n\n  if (sameColorCount >= 5) {\n    threat = 5;\n  }\n\n  return threat;\n}\n\nfunction moveEvaluation(move, pieceColor, defFactor, board) {\n  let offenceScore = atkMoveEvaluation(move, pieceColor, board);\n  let oppositeColor = swapColor(pieceColor);\n  let boardCopy = copyTwoDimArray(board);\n  boardCopy[move[0]][move[1]] = oppositeColor;\n  let defenceScore = atkMoveEvaluation(move, oppositeColor, boardCopy) * defFactor;\n  let totalScore = offenceScore + defenceScore;\n  return totalScore;\n}\n\nexport default moveEvaluation;","map":{"version":3,"names":["swapColor","copyTwoDimArray","atkMoveEvaluation","move","pieceColor","board","rowCoord","colCoord","score","threeCount","fourCount","fourOneCount","fiveCount","vThreat","threatRecognise","verticalCheck","hThreat","horizontalCheck","d1Threat","leftBotToRightTopCheck","d2Threat","leftTopToRightBotCheck","threats","map","threat","index","sameColorCount","oppositeColorCount","rowIndex","colIndex","occupant","counts","sameColor","oppositeColor","moveEvaluation","defFactor","offenceScore","boardCopy","defenceScore","totalScore"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/AIplayers/GA/MoveEvaluation.jsx"],"sourcesContent":["import {swapColor} from \"../../GameLogic.jsx\";\r\nimport {copyTwoDimArray} from \"../../GeneralAlgorithms.jsx\"\r\nfunction atkMoveEvaluation(move,pieceColor,board){\r\n    let rowCoord=move[0];\r\n    let colCoord=move[1];\r\n    let score=0;\r\n\r\n    let threeCount=0;\r\n    let fourCount=0;\r\n    let fourOneCount=0;\r\n    let fiveCount=0;\r\n    let vThreat=threatRecognise(verticalCheck(rowCoord,colCoord,pieceColor,board));\r\n    let hThreat=threatRecognise(horizontalCheck(rowCoord,colCoord,pieceColor,board));\r\n    let d1Threat=threatRecognise(leftBotToRightTopCheck(rowCoord,colCoord,pieceColor,board));\r\n    let d2Threat=threatRecognise(leftTopToRightBotCheck(rowCoord,colCoord,pieceColor,board));\r\n    let threats=[vThreat,hThreat,d1Threat,d2Threat];\r\n    threats.map((threat,index)=>{\r\n        switch(threat){\r\n            case 2:\r\n                score+=2;\r\n                break;\r\n            case 21:\r\n                score +=1;\r\n                break;\r\n            case 31:\r\n                score+=4;\r\n                break;\r\n            // two 3 in a row form a winning threat so high point, more than that no much point\r\n            case 3:\r\n                threeCount++;\r\n                if (threeCount===2 ){\r\n                    score+=22\r\n                } else if (threeCount>=3){\r\n                    score+=1;\r\n                } else {\r\n                    if(fourOneCount===1){\r\n                        score+=14\r\n                    } else{\r\n                        score+=8\r\n                    }                    \r\n                }             \r\n                break;\r\n            //no much point for multiple 4 in a row\r\n            case 4:\r\n                fourCount++;\r\n                if (fourCount>=2 ){\r\n                    score+=1\r\n                } else {\r\n                    score+=32;\r\n                }\r\n                \r\n                break;\r\n            case 41:\r\n                fourOneCount++;\r\n                if (fourOneCount===1){\r\n                    if(threeCount===1){\r\n                        score+=22\r\n\r\n                    }else{\r\n                        score+=16\r\n                    }\r\n                } else{\r\n                    score+=1\r\n                }\r\n                \r\n                \r\n                break;\r\n            default:\r\n                score+=0;\r\n    }\r\n    if(threat===5){\r\n        fiveCount++;\r\n        if (fiveCount===1){\r\n            score+=128;\r\n        } else{\r\n            score+=1;\r\n        }\r\n    }\r\n    return score\r\n\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\nfunction verticalCheck(rowCoord,colCoord,pieceColor,board){\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n\r\n    while(board[rowIndex][colIndex]!==\" \" && rowIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++\r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        rowIndex--;\r\n    };\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while(board[rowIndex][colIndex]!==\" \" && rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++\r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        rowIndex++;\r\n    }\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n}\r\n\r\n\r\nfunction horizontalCheck(rowCoord,colCoord,pieceColor,board){\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n\r\n    while(board[rowIndex][colIndex]!==\" \" && colIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++\r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        colIndex--;\r\n    };\r\n    rowIndex=rowCoord;\r\n    colIndex=colCoord;\r\n    while(board[rowIndex][colIndex]!==\" \" && colIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++\r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        colIndex++;\r\n    }\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n}\r\n\r\n\r\nfunction leftBotToRightTopCheck (rowCoord,colCoord,pieceColor,board){\r\n\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n\r\n    //to right top\r\n        while(board[rowIndex][colIndex]!==\" \" && rowIndex>=0 && colIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++;    \r\n            // console.log(count)        \r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        rowIndex--;\r\n        colIndex++;\r\n    }\r\n    //to left bot\r\n    while(board[rowIndex][colIndex]!==\" \" && colIndex>=0 && rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++;    \r\n            // console.log(count)        \r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        colIndex--;\r\n        rowIndex++;\r\n    }\r\n\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n\r\n}\r\n\r\n\r\nfunction leftTopToRightBotCheck (rowCoord,colCoord,pieceColor,board){\r\n\r\n    let sameColorCount=-1;\r\n    let oppositeColorCount=0;\r\n    let rowIndex=rowCoord;\r\n    let colIndex=colCoord;\r\n    let occupant;\r\n    let counts;\r\n    //to leftTop\r\n        while(board[rowIndex][colIndex]!==\" \" && rowIndex>=0 && colIndex>=0){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++;    \r\n            // console.log(count)        \r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        rowIndex--;\r\n        colIndex--;\r\n    }\r\n    while(board[rowIndex][colIndex]!==\" \" && colIndex<15 && rowIndex<15){\r\n        occupant=board[rowIndex][colIndex];\r\n        if (occupant===pieceColor){\r\n            sameColorCount++;    \r\n            // console.log(count)        \r\n        } else {\r\n            oppositeColorCount++;\r\n            break;\r\n        }\r\n        colIndex++;\r\n        rowIndex++;\r\n    }\r\n\r\n    counts={sameColor:sameColorCount, oppositeColor:oppositeColorCount}\r\n    return counts\r\n}\r\n\r\nfunction threatRecognise(counts){\r\n    let sameColorCount= counts.sameColor;\r\n    let oppositeColorCount=counts.oppositeColor;\r\n    let threat=null;\r\n    switch([sameColorCount,oppositeColorCount]){\r\n        case [2,0]:\r\n            threat=2;\r\n            break;\r\n        case [2,1]:\r\n            threat=21;\r\n            break;\r\n        case [3,0]:\r\n            threat=3;\r\n            break;\r\n        case [3,1]:\r\n            threat=31;\r\n            break;\r\n        case [4,0]:\r\n            threat=4;\r\n            break;\r\n        case [4,1]:\r\n            threat=41;\r\n            break;\r\n        default:\r\n            threat=null;\r\n}\r\nif (sameColorCount>=5){\r\n    threat=5\r\n}\r\nreturn threat\r\n}\r\n\r\nfunction moveEvaluation(move,pieceColor,defFactor,board){\r\n    let offenceScore=atkMoveEvaluation(move,pieceColor,board);\r\n    let oppositeColor=swapColor(pieceColor);\r\n    let boardCopy=copyTwoDimArray(board);\r\n    boardCopy[move[0]][move[1]]=oppositeColor;\r\n    let defenceScore=atkMoveEvaluation(move,oppositeColor,boardCopy)*defFactor;\r\n    let totalScore=offenceScore+defenceScore;\r\n    return totalScore;\r\n\r\n}\r\n\r\nexport default moveEvaluation;"],"mappings":"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"},"metadata":{},"sourceType":"module"}