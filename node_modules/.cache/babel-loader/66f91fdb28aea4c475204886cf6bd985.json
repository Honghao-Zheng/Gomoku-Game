{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\MSc project\\\\project\\\\gomoku\\\\src\\\\components\\\\gameplaypage\\\\PlayerVSComputer.jsx\",\n    _s = $RefreshSig$();\n\n// import Board from \"../Board\";\n// import {NavButton,FunctionButton} from \"../Buttons\";\n// import { putDownPiece, checkWinning } from \"../GameLogic\"\n// import { useState } from \"react\";\n// import ShowText from \"../ShowText\";\n// import chooseRandomMove from \"../AIplayers/RandomPlayer\"\n// let boardArrangement1vsAI=[\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\n//   ];\n// function PlayerVsComputer(props){\n//     let whoPlaysFirst=props.gameSetting.whoGoFirst;\n//     let AIalgorithm=props.gameSetting.computer;\n//     const [turnState,setTurn]=useState({\n//     isBlackTurn:true\n//   });\n//       const [gameState,setGame]=useState({\n//         isEnded:false,\n//         winner:null\n//       })\n//       const [moveState,setMove]=useState({\n//         moveMade:[]\n//       })\n//     // if(whoPlaysFirst!==\"Player 1\"){\n//     //     let moveMade=AImakeMove(AIalgorithm,\"Black\",boardArrangement1vsAI)\n//     //     setMove({moveMade:moveMade})\n//     //     setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \n//     // }\n//     function AImakeMove(AI,turn,board){\n//         let computerMove;\n//         if(AI===\"Random\"){\n//             computerMove=chooseRandomMove(board)\n//         } else if(AI===\"Minimax\") {\n//         } else if(AI===\"Greedy\"){\n//         }\n//         putDownPiece(computerMove,turn,board)\n//         return computerMove\n//     } \n//     function handleMoveClick(clickedIntersectionCoord){\n//       let turn=turnState.isBlackTurn?\"B\":\"W\";\n//       let rowCoord, colCoord;\n//       let isMoveMade;\n//       let whoWin;\n//       [rowCoord,colCoord]=clickedIntersectionCoord;\n//       isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement1vsAI);\n//       if (isMoveMade){\n//         whoWin =checkWinning(turn,rowCoord,colCoord,boardArrangement1vsAI);\n//         if (whoWin!==null){\n//           setGame({\n//             isEnded:true,\n//             winner:whoWin\n//           })\n//         }; \n//         // console.log(moveState.moveMade)\n//         setMove({moveMade:clickedIntersectionCoord})\n//         setTurn({isBlackTurn:turnState.isBlackTurn?false:true});       \n//       } \n//     //   turn=turnState.isBlackTurn?\"B\":\"W\"\n//     //   let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement1vsAI)\n//     //   whoWin =checkWinning(turn,moveMade,boardArrangement1vsAI);\n//     //   if (whoWin!==null){\n//     //     setGame({\n//     //       isEnded:true,\n//     //       winner:whoWin\n//     //     })\n//     //   }; \n//     }\n//     function getWinningDeclaration(whowin){\n//         if (whowin===\"B\"){\n//             return (\"Black piece win !\")\n//         } else if(whowin===\"W\" ){\n//             return (\"White piece win !\")\n//         } else if (whowin===\"D\" ){\n//             return (\"Game Draw\")\n//         }\n//     }\n//     function resetBoard(board){\n//         let rowIndex,colIndex;\n//         for (rowIndex=0;rowIndex<board.length;rowIndex++){\n//           for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\n//             if(board[rowIndex][colIndex]!==\" \"){\n//                 board[rowIndex][colIndex]=\" \"\n//             }\n//           }\n//         }\n//     }\n//     function resetGame(board){\n//         resetBoard(board)\n//         setTurn({isBlackTurn:true})\n//         setGame({isEnded:false, winner:null})\n//         setMove({moveMade:[]})\n//     }\n//     function returnHome(board){\n//       props.onClick();\n//       resetGame(board)\n//     }\n//     // console.log(gameState.isEnded)\n//     // console.log(gameState.winner)\n//     // console.log(boardArrangement1vs1)\n//     return(\n//         <div>\n//         <div className=\"rows\">\n//         <NavButton text=\"Home\" onClick={()=>{\n//                 returnHome(boardArrangement1vsAI)\n//             }}/>\n//             <h1>Player 1 VS Player 2</h1>\n//         </div>\n//         <div className=\"gameScreen\">\n//                 <div className=\"gameboard\">        \n//                     <Board\n//                         boardArrangement={boardArrangement1vsAI}\n//                         onClick={gameState.isEnded?\n//                                     null:\n//                                     ([rowNum,colNum])=>handleMoveClick([rowNum,colNum])}\n//                         moveMade={moveState.moveMade}\n//                         />\n//                 </div>\n//                 <div className=\"des\">\n//                     <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement1vsAI)}/>\n//                     {\n//                     gameState.isEnded?\n//                     <ShowText textColour=\"textRed\"\n//                         condition={gameState.isEnded}\n//                         textIfTrue={getWinningDeclaration(gameState.winner)}\n//                         textIfFalse=\"\"\n//                      />:\n//                    <ShowText textColour=\"textBlack\"\n//                         condition={turnState.isBlackTurn}\n//                         textIfTrue=\"Turn: Black\"\n//                         textIfFalse=\"Turn: White\"\n//                     />\n//                     }\n//                     <ShowText textColour=\"textBlack\"\n//                         condition={true}\n//                         textIfTrue=\"Black Piece: Player 1\"\n//                         textIfFalse=\"\"\n//                     />\n//                        <ShowText textColour=\"textBlack\"\n//                         condition={true}\n//                         textIfTrue=\"white Piece: Player 2\"\n//                         textIfFalse=\"\"\n//                     />                  \n//                 </div>\n//         </div>\n//         </div>\n//     )\n// }\n// export default PlayerVsComputer;\nimport Board from \"../Board\";\nimport { NavButton, FunctionButton } from \"../Buttons\";\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\";\nimport { putDownPiece, checkWinning } from \"../GameLogic\";\nimport { useState } from \"react\";\nimport ShowText from \"../ShowText\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardArrangement1vsn\nfunction PlayerVsComputer(props) {\n  _s();\n\n  let whoPlaysFirst = props.settings.whoGoFirst;\n  let AIalgorithm = props.settings.computer;\n  const [turnState, setTurn] = useState({\n    isBlackTurn: true\n  });\n  const [gameState, setGame] = useState({\n    isEnded: false,\n    winner: null\n  });\n  const [moveState, setMove] = useState({\n    moveMade: []\n  });\n\n  if (whoPlaysFirst !== \"Player 1\") {\n    let moveMade = AImakeMove(AIalgorithm, \"Black\", boardArrangement1vs1);\n    setMove({\n      moveMade: moveMade\n    });\n    setTurn({\n      isBlackTurn: turnState.isBlackTurn ? false : true\n    });\n  }\n\n  function AImakeMove(AI, turn, board) {\n    let computerMove;\n\n    if (AI === \"Random\") {\n      computerMove = chooseRandomMove(board);\n    } else if (AI === \"Minimax\") {} else if (AI === \"Greedy\") {}\n\n    putDownPiece(computerMove, turn, board);\n    return computerMove;\n  }\n\n  function handleMoveClick(clickedIntersectionCoord) {\n    let turn = turnState.isBlackTurn ? \"B\" : \"W\";\n    let isMoveMade;\n    let whoWin;\n    isMoveMade = putDownPiece(clickedIntersectionCoord, turn, boardArrangement1vs1);\n\n    if (isMoveMade) {\n      whoWin = checkWinning(turn, clickedIntersectionCoord, boardArrangement1vs1);\n\n      if (whoWin !== null) {\n        setGame({\n          isEnded: true,\n          winner: whoWin\n        });\n      }\n\n      ; // console.log(moveState.moveMade)\n\n      setMove({\n        moveMade: clickedIntersectionCoord\n      });\n      setTurn({\n        isBlackTurn: turnState.isBlackTurn ? false : true\n      });\n\n      if (turn === \"B\") {\n        turn = \"W\";\n      } else {\n        turn = \"B\";\n      }\n\n      let moveMade = AImakeMove(AIalgorithm, turn, boardArrangement1vs1);\n      whoWin = checkWinning(turn, moveMade, boardArrangement1vs1);\n\n      if (whoWin !== null) {\n        setGame({\n          isEnded: true,\n          winner: whoWin\n        });\n      }\n\n      ;\n    }\n  }\n\n  function getWinningDeclaration(whowin) {\n    if (whowin === \"B\") {\n      return \"Black piece win !\";\n    } else if (whowin === \"W\") {\n      return \"White piece win !\";\n    } else if (whowin === \"D\") {\n      return \"Game Draw\";\n    }\n  }\n\n  function resetBoard(board) {\n    let rowIndex, colIndex;\n\n    for (rowIndex = 0; rowIndex < board.length; rowIndex++) {\n      for (colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {\n        if (board[rowIndex][colIndex] !== \" \") {\n          board[rowIndex][colIndex] = \" \";\n        }\n      }\n    }\n  }\n\n  function resetGame(board) {\n    resetBoard(board);\n    setTurn({\n      isBlackTurn: true\n    });\n    setGame({\n      isEnded: false,\n      winner: null\n    });\n    setMove({\n      moveMade: []\n    });\n  }\n\n  function returnHome(board) {\n    props.onClickHome();\n    resetGame(board);\n  } // console.log(gameState.isEnded)\n  // console.log(gameState.winner)\n  // console.log(boardArrangement1vs1)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(NavButton, {\n        text: \"Home\",\n        onClickHome: () => {\n          returnHome(boardArrangement1vs1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Player 1 VS Player 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameScreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          boardArrangement: boardArrangement1vs1,\n          onClick: gameState.isEnded ? null : _ref => {\n            let [rowNum, colNum] = _ref;\n            return handleMoveClick([rowNum, colNum]);\n          },\n          moveMade: moveState.moveMade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"des\",\n        children: [/*#__PURE__*/_jsxDEV(FunctionButton, {\n          text: \"reset\",\n          onClick: () => resetGame(boardArrangement1vs1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), gameState.isEnded ? /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textRed\",\n          condition: gameState.isEnded,\n          textIfTrue: getWinningDeclaration(gameState.winner),\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: turnState.isBlackTurn,\n          textIfTrue: \"Turn: Black\",\n          textIfFalse: \"Turn: White\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"Black Piece: Player 1\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ShowText, {\n          textColour: \"textBlack\",\n          condition: true,\n          textIfTrue: \"white Piece: Player 2\",\n          textIfFalse: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerVsComputer, \"vyxZbMHQek0J23KZEW24OM9Umm8=\");\n\n_c = PlayerVsComputer;\nexport default PlayerVsComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerVsComputer\");","map":{"version":3,"names":["Board","NavButton","FunctionButton","chooseRandomMove","putDownPiece","checkWinning","useState","ShowText","boardArrangement1vs1","PlayerVsComputer","props","whoPlaysFirst","settings","whoGoFirst","AIalgorithm","computer","turnState","setTurn","isBlackTurn","gameState","setGame","isEnded","winner","moveState","setMove","moveMade","AImakeMove","AI","turn","board","computerMove","handleMoveClick","clickedIntersectionCoord","isMoveMade","whoWin","getWinningDeclaration","whowin","resetBoard","rowIndex","colIndex","length","resetGame","returnHome","onClickHome","rowNum","colNum"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/gameplaypage/PlayerVSComputer.jsx"],"sourcesContent":["// import Board from \"../Board\";\r\n// import {NavButton,FunctionButton} from \"../Buttons\";\r\n\r\n// import { putDownPiece, checkWinning } from \"../GameLogic\"\r\n// import { useState } from \"react\";\r\n// import ShowText from \"../ShowText\";\r\n// import chooseRandomMove from \"../AIplayers/RandomPlayer\"\r\n// let boardArrangement1vsAI=[\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n//     [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n//   ];\r\n\r\n// function PlayerVsComputer(props){\r\n\r\n//     let whoPlaysFirst=props.gameSetting.whoGoFirst;\r\n//     let AIalgorithm=props.gameSetting.computer;\r\n//     const [turnState,setTurn]=useState({\r\n//     isBlackTurn:true\r\n//   });\r\n//       const [gameState,setGame]=useState({\r\n//         isEnded:false,\r\n//         winner:null\r\n//       })\r\n//       const [moveState,setMove]=useState({\r\n//         moveMade:[]\r\n//       })\r\n\r\n\r\n//     // if(whoPlaysFirst!==\"Player 1\"){\r\n//     //     let moveMade=AImakeMove(AIalgorithm,\"Black\",boardArrangement1vsAI)\r\n//     //     setMove({moveMade:moveMade})\r\n//     //     setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \r\n//     // }\r\n\r\n//     function AImakeMove(AI,turn,board){\r\n//         let computerMove;\r\n//         if(AI===\"Random\"){\r\n//             computerMove=chooseRandomMove(board)\r\n//         } else if(AI===\"Minimax\") {\r\n//         } else if(AI===\"Greedy\"){\r\n//         }\r\n//         putDownPiece(computerMove,turn,board)\r\n//         return computerMove\r\n//     } \r\n\r\n\r\n//     function handleMoveClick(clickedIntersectionCoord){\r\n      \r\n//       let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n//       let rowCoord, colCoord;\r\n//       let isMoveMade;\r\n//       let whoWin;\r\n\r\n//       [rowCoord,colCoord]=clickedIntersectionCoord;\r\n//       isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement1vsAI);\r\n//       if (isMoveMade){\r\n//         whoWin =checkWinning(turn,rowCoord,colCoord,boardArrangement1vsAI);\r\n//         if (whoWin!==null){\r\n//           setGame({\r\n//             isEnded:true,\r\n//             winner:whoWin\r\n//           })\r\n//         }; \r\n//         // console.log(moveState.moveMade)\r\n//         setMove({moveMade:clickedIntersectionCoord})\r\n//         setTurn({isBlackTurn:turnState.isBlackTurn?false:true});       \r\n//       } \r\n\r\n//     //   turn=turnState.isBlackTurn?\"B\":\"W\"\r\n//     //   let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement1vsAI)\r\n//     //   whoWin =checkWinning(turn,moveMade,boardArrangement1vsAI);\r\n//     //   if (whoWin!==null){\r\n//     //     setGame({\r\n//     //       isEnded:true,\r\n//     //       winner:whoWin\r\n//     //     })\r\n//     //   }; \r\n//     }\r\n\r\n//     function getWinningDeclaration(whowin){\r\n//         if (whowin===\"B\"){\r\n//             return (\"Black piece win !\")\r\n//         } else if(whowin===\"W\" ){\r\n//             return (\"White piece win !\")\r\n//         } else if (whowin===\"D\" ){\r\n//             return (\"Game Draw\")\r\n//         }\r\n//     }\r\n\r\n//     function resetBoard(board){\r\n//         let rowIndex,colIndex;\r\n//         for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n//           for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n//             if(board[rowIndex][colIndex]!==\" \"){\r\n//                 board[rowIndex][colIndex]=\" \"\r\n//             }\r\n//           }\r\n                   \r\n//         }\r\n//     }\r\n\r\n//     function resetGame(board){\r\n//         resetBoard(board)\r\n//         setTurn({isBlackTurn:true})\r\n//         setGame({isEnded:false, winner:null})\r\n//         setMove({moveMade:[]})\r\n//     }\r\n\r\n//     function returnHome(board){\r\n//       props.onClick();\r\n//       resetGame(board)\r\n//     }\r\n\r\n\r\n//     // console.log(gameState.isEnded)\r\n//     // console.log(gameState.winner)\r\n//     // console.log(boardArrangement1vs1)\r\n//     return(\r\n//         <div>\r\n//         <div className=\"rows\">\r\n//         <NavButton text=\"Home\" onClick={()=>{\r\n//                 returnHome(boardArrangement1vsAI)\r\n//             }}/>\r\n\r\n//             <h1>Player 1 VS Player 2</h1>\r\n//         </div>\r\n        \r\n\r\n//         <div className=\"gameScreen\">\r\n\r\n//                 <div className=\"gameboard\">        \r\n//                     <Board\r\n//                         boardArrangement={boardArrangement1vsAI}\r\n//                         onClick={gameState.isEnded?\r\n//                                     null:\r\n//                                     ([rowNum,colNum])=>handleMoveClick([rowNum,colNum])}\r\n//                         moveMade={moveState.moveMade}\r\n//                         />\r\n//                 </div>\r\n//                 <div className=\"des\">\r\n                \r\n//                     <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement1vsAI)}/>\r\n//                     {\r\n//                     gameState.isEnded?\r\n//                     <ShowText textColour=\"textRed\"\r\n//                         condition={gameState.isEnded}\r\n//                         textIfTrue={getWinningDeclaration(gameState.winner)}\r\n//                         textIfFalse=\"\"\r\n//                      />:\r\n//                    <ShowText textColour=\"textBlack\"\r\n//                         condition={turnState.isBlackTurn}\r\n//                         textIfTrue=\"Turn: Black\"\r\n//                         textIfFalse=\"Turn: White\"\r\n//                     />\r\n//                     }\r\n//                     <ShowText textColour=\"textBlack\"\r\n//                         condition={true}\r\n//                         textIfTrue=\"Black Piece: Player 1\"\r\n//                         textIfFalse=\"\"\r\n//                     />\r\n//                        <ShowText textColour=\"textBlack\"\r\n//                         condition={true}\r\n//                         textIfTrue=\"white Piece: Player 2\"\r\n//                         textIfFalse=\"\"\r\n//                     />                  \r\n//                 </div>\r\n\r\n//         </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default PlayerVsComputer;\r\n\r\nimport Board from \"../Board\";\r\nimport {NavButton,FunctionButton} from \"../Buttons\";\r\nimport chooseRandomMove from \"../AIplayers/RandomPlayer\"\r\nimport { putDownPiece, checkWinning } from \"../GameLogic\"\r\nimport { useState } from \"react\";\r\nimport ShowText from \"../ShowText\";\r\n\r\nlet boardArrangement1vs1=[\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\r\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"]\r\n  ];\r\n\r\nfunction PlayerVsComputer(props){\r\n    let whoPlaysFirst=props.settings.whoGoFirst;\r\n    let AIalgorithm=props.settings.computer;    \r\n\r\n    const [turnState,setTurn]=useState({\r\n    isBlackTurn:true\r\n  });\r\n      const [gameState,setGame]=useState({\r\n        isEnded:false,\r\n        winner:null\r\n      })\r\n      const [moveState,setMove]=useState({\r\n        moveMade:[]\r\n      })\r\n          if(whoPlaysFirst!==\"Player 1\"){\r\n        let moveMade=AImakeMove(AIalgorithm,\"Black\",boardArrangement1vs1)\r\n        setMove({moveMade:moveMade})\r\n        setTurn({isBlackTurn:turnState.isBlackTurn?false:true});    \r\n    }\r\n\r\n    function AImakeMove(AI,turn,board){\r\n        let computerMove;\r\n        if(AI===\"Random\"){\r\n            computerMove=chooseRandomMove(board)\r\n        } else if(AI===\"Minimax\") {\r\n        } else if(AI===\"Greedy\"){\r\n        }\r\n        putDownPiece(computerMove,turn,board)\r\n        return computerMove\r\n    } \r\n    function handleMoveClick(clickedIntersectionCoord){\r\n      \r\n      let turn=turnState.isBlackTurn?\"B\":\"W\";\r\n      let isMoveMade;\r\n      let whoWin;\r\n\r\n      isMoveMade = putDownPiece(clickedIntersectionCoord,turn,boardArrangement1vs1);\r\n      if (isMoveMade){\r\n        whoWin =checkWinning(turn,clickedIntersectionCoord,boardArrangement1vs1);\r\n        if (whoWin!==null){\r\n          setGame({\r\n            isEnded:true,\r\n            winner:whoWin\r\n          })\r\n        }; \r\n        // console.log(moveState.moveMade)\r\n        setMove({moveMade:clickedIntersectionCoord})\r\n        setTurn({isBlackTurn:turnState.isBlackTurn?false:true});\r\n        if(turn===\"B\"){\r\n            turn=\"W\"\r\n        }else{\r\n            turn=\"B\"\r\n        }\r\n      let moveMade=AImakeMove(AIalgorithm,turn,boardArrangement1vs1)\r\n      whoWin =checkWinning(turn,moveMade,boardArrangement1vs1);\r\n      if (whoWin!==null){\r\n        setGame({\r\n          isEnded:true,\r\n          winner:whoWin\r\n        })\r\n      }; \r\n    \r\n      } \r\n    }\r\n\r\n    function getWinningDeclaration(whowin){\r\n        if (whowin===\"B\"){\r\n            return (\"Black piece win !\")\r\n        } else if(whowin===\"W\" ){\r\n            return (\"White piece win !\")\r\n        } else if (whowin===\"D\" ){\r\n            return (\"Game Draw\")\r\n        }\r\n    }\r\n\r\n    function resetBoard(board){\r\n        let rowIndex,colIndex;\r\n        for (rowIndex=0;rowIndex<board.length;rowIndex++){\r\n          for (colIndex=0;colIndex<board[rowIndex].length;colIndex++){\r\n            if(board[rowIndex][colIndex]!==\" \"){\r\n                board[rowIndex][colIndex]=\" \"\r\n            }\r\n          }\r\n                   \r\n        }\r\n    }\r\n\r\n    function resetGame(board){\r\n        resetBoard(board)\r\n        setTurn({isBlackTurn:true})\r\n        setGame({isEnded:false, winner:null})\r\n        setMove({moveMade:[]})\r\n    }\r\n\r\n    function returnHome(board){\r\n      props.onClickHome();\r\n      resetGame(board)\r\n    }\r\n\r\n\r\n    // console.log(gameState.isEnded)\r\n    // console.log(gameState.winner)\r\n    // console.log(boardArrangement1vs1)\r\n    return(\r\n        <div>\r\n        <div className=\"rows\">\r\n        <NavButton text=\"Home\" onClickHome={()=>{\r\n                returnHome(boardArrangement1vs1)\r\n            }}/>\r\n\r\n            <h1>Player 1 VS Player 2</h1>\r\n        </div>\r\n        \r\n\r\n        <div className=\"gameScreen\">\r\n\r\n                <div className=\"gameboard\">        \r\n                    <Board\r\n                        boardArrangement={boardArrangement1vs1}\r\n                        onClick={gameState.isEnded?\r\n                                    null:\r\n                                    ([rowNum,colNum])=>handleMoveClick([rowNum,colNum])}\r\n                        moveMade={moveState.moveMade}\r\n                        />\r\n                </div>\r\n                <div className=\"des\">\r\n                \r\n                    <FunctionButton text=\"reset\" onClick={()=>resetGame(boardArrangement1vs1)}/>\r\n                    {\r\n                    gameState.isEnded?\r\n                    <ShowText textColour=\"textRed\"\r\n                        condition={gameState.isEnded}\r\n                        textIfTrue={getWinningDeclaration(gameState.winner)}\r\n                        textIfFalse=\"\"\r\n                     />:\r\n                   <ShowText textColour=\"textBlack\"\r\n                        condition={turnState.isBlackTurn}\r\n                        textIfTrue=\"Turn: Black\"\r\n                        textIfFalse=\"Turn: White\"\r\n                    />\r\n                    }\r\n                    <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"Black Piece: Player 1\"\r\n                        textIfFalse=\"\"\r\n                    />\r\n                       <ShowText textColour=\"textBlack\"\r\n                        condition={true}\r\n                        textIfTrue=\"white Piece: Player 2\"\r\n                        textIfFalse=\"\"\r\n                    />                  \r\n                </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerVsComputer;"],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,SAAR,EAAkBC,cAAlB,QAAuC,YAAvC;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,cAA3C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,IAAIC,oBAAoB,GAAC,CACrB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,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"},"metadata":{},"sourceType":"module"}