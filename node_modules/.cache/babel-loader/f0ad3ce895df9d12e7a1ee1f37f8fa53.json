{"ast":null,"code":"import { copyTwoDimArray, random } from \"../../GeneralAlgorithms.jsx\";\nimport { chooseRandomMove } from \"../RandomPlayer.jsx\";\nimport { putDownPiece } from \"../../GameLogic.jsx\";\nimport { moveEvaluation } from \"./MoveEvaluation\"; //!!!!!!!!!!!!!!!!!!!!!!!\n//!!!!!!!!!!!!!!!!!!!!!!\n//for the last few moves the depth should start decrease\n\nfunction initIndMoves(turn, depth, board) {\n  let boardCopy = copyTwoDimArray(board);\n  let move;\n  let possibleMoves;\n  let numOfMoves;\n  let d;\n  let moveIndex;\n  let individualMoves = [];\n  possibleMoves = movesSearch(boardCopy);\n  numOfMoves = possibleMoves.length;\n  moveIndex = random(numOfMoves);\n\n  if (numOfMoves !== 0) {\n    move = possibleMoves[moveIndex];\n  } else {\n    move = chooseRandomMove(boardCopy);\n  }\n\n  individualMoves.push(move);\n\n  for (d = 1; d <= depth - 1; d++) {\n    putDownPiece(move, turn, boardCopy);\n    possibleMoves = movesSearch(boardCopy);\n    numOfMoves = possibleMoves.length;\n    moveIndex = random(numOfMoves);\n    move = possibleMoves[moveIndex];\n    individualMoves.push(move);\n  }\n}\n\nfunction movesSearch(board) {\n  let rowCoord;\n  let colCoord;\n  let moveCollection = [];\n  let searchRange = [-1, 1];\n  let i, j;\n  let rowIndex, colIndex;\n  let moveRow, moveCol;\n\n  for (rowCoord = 0; rowCoord < 15; rowCoord++) {\n    for (colCoord = 0; colCoord < 15; colCoord++) {\n      if (board[rowCoord][colCoord] !== \" \") {\n        for (i = 0; i < searchRange.length; i++) {\n          for (j = 0; j < searchRange.length; j++) {\n            rowIndex = searchRange[i];\n            colIndex = searchRange[j];\n            moveRow = rowCoord + rowIndex;\n            moveCol = colCoord + colIndex;\n\n            if (moveRow >= 0 && moveRow <= 14 && moveCol >= 0 && moveCol <= 14) {\n              if (board[moveRow][moveCol] === \" \") {\n                moveCollection.push([moveRow, moveCol]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return moveCollection;\n}\n\nexport default initIndMoves;","map":{"version":3,"names":["copyTwoDimArray","random","chooseRandomMove","putDownPiece","moveEvaluation","initIndMoves","turn","depth","board","boardCopy","move","possibleMoves","numOfMoves","d","moveIndex","individualMoves","movesSearch","length","push","rowCoord","colCoord","moveCollection","searchRange","i","j","rowIndex","colIndex","moveRow","moveCol"],"sources":["C:/Users/Jason/Desktop/MSc project/project/gomoku/src/components/AIplayers/GA/InitIndMoves.jsx"],"sourcesContent":["import {copyTwoDimArray,random} from \"../../GeneralAlgorithms.jsx\"\r\nimport {chooseRandomMove} from \"../RandomPlayer.jsx\";\r\nimport {putDownPiece} from \"../../GameLogic.jsx\"\r\nimport {moveEvaluation} from \"./MoveEvaluation\"\r\n//!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!!!!!!!!!!!!!!!!!!!!\r\n//for the last few moves the depth should start decrease\r\nfunction initIndMoves(turn,depth,board){\r\n    let boardCopy=copyTwoDimArray(board)\r\n    let move;\r\n    let possibleMoves;\r\n    let numOfMoves;\r\n    let d;\r\n    let moveIndex;\r\n    let individualMoves=[];\r\n    possibleMoves=movesSearch(boardCopy)\r\n    numOfMoves=possibleMoves.length;\r\n    moveIndex=random(numOfMoves);\r\n    if (numOfMoves!==0){\r\n        move=possibleMoves[moveIndex];\r\n    } else{\r\n        move=chooseRandomMove(boardCopy)\r\n    }\r\n    individualMoves.push(move)\r\n    \r\n    \r\n    for(d=1;d<=depth-1;d++){\r\n        putDownPiece(move,turn,boardCopy)\r\n        possibleMoves=movesSearch(boardCopy);\r\n        numOfMoves=possibleMoves.length;\r\n        moveIndex=random(numOfMoves);\r\n        move=possibleMoves[moveIndex];\r\n        individualMoves.push(move)\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction movesSearch(board){\r\n    let rowCoord;\r\n    let colCoord;\r\n    let moveCollection=[];\r\n    let searchRange=[-1,1]\r\n    let i,j\r\n    let rowIndex,colIndex;\r\n    let moveRow,moveCol;\r\n    for (rowCoord=0;rowCoord<15;rowCoord++){\r\n        for (colCoord=0;colCoord<15;colCoord++){\r\n            if (board[rowCoord][colCoord]!==\" \"){\r\n                for(i=0;i<searchRange.length;i++){\r\n                    for(j=0;j<searchRange.length;j++){\r\n                        rowIndex=searchRange[i];\r\n                        colIndex=searchRange[j];\r\n                        moveRow=rowCoord+rowIndex;\r\n                        moveCol=colCoord+colIndex\r\n                        if(\r\n                            moveRow>=0 &&\r\n                            moveRow<=14 &&\r\n                            moveCol>=0 &&\r\n                            moveCol <=14 \r\n                            \r\n                        ){\r\n                            if(board[moveRow][moveCol]===\" \"){\r\n                                moveCollection.push([moveRow,moveCol])\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    return moveCollection;\r\n}\r\n\r\nexport default initIndMoves;"],"mappings":"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"},"metadata":{},"sourceType":"module"}